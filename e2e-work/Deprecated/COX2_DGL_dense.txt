Max number of node: 56
Number of graph categories: 2
[Graph(num_nodes=201, num_edges=422,
      ndata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64), 'node_attr': Scheme(shape=(3,), dtype=torch.float64), 'node_labels': Scheme(shape=(1,), dtype=torch.int64)}
      edata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64)}), tensor([[0],
        [1],
        [1],
        [0],
        [1]])]
Number of nodes for each graph element in the batch: tensor([45, 42, 42, 36, 36])
Number of edges for each graph element in the batch: tensor([94, 88, 88, 76, 76])
The original graphs in the minibatch:
[Graph(num_nodes=45, num_edges=94,
      ndata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64), 'node_attr': Scheme(shape=(3,), dtype=torch.float64), 'node_labels': Scheme(shape=(1,), dtype=torch.int64)}
      edata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64)}), Graph(num_nodes=42, num_edges=88,
      ndata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64), 'node_attr': Scheme(shape=(3,), dtype=torch.float64), 'node_labels': Scheme(shape=(1,), dtype=torch.int64)}
      edata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64)}), Graph(num_nodes=42, num_edges=88,
      ndata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64), 'node_attr': Scheme(shape=(3,), dtype=torch.float64), 'node_labels': Scheme(shape=(1,), dtype=torch.int64)}
      edata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64)}), Graph(num_nodes=36, num_edges=76,
      ndata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64), 'node_attr': Scheme(shape=(3,), dtype=torch.float64), 'node_labels': Scheme(shape=(1,), dtype=torch.int64)}
      edata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64)}), Graph(num_nodes=36, num_edges=76,
      ndata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64), 'node_attr': Scheme(shape=(3,), dtype=torch.float64), 'node_labels': Scheme(shape=(1,), dtype=torch.int64)}
      edata_schemes={'_ID': Scheme(shape=(), dtype=torch.int64)})]
in_feats:  3
h_feats:  16
num_classes:  2
state_dict:  OrderedDict([('conv1.weight', tensor([[-0.5082, -0.1581, -0.0276,  0.3003,  0.3025, -0.1402,  0.6910,  0.0488,
         -0.0209,  0.4019, -0.1888, -0.3462, -0.0812, -0.0220, -0.4020, -0.0378],
        [ 0.9654,  0.1205,  0.1186, -0.6899,  0.0029, -0.0299, -0.1665, -0.2750,
          0.5587, -0.8644,  0.6173,  0.6208, -0.4718,  0.0733,  0.0871,  0.0671],
        [-0.6645,  0.6106,  0.1069,  0.0832,  0.0344, -0.0615,  0.1303, -0.1129,
         -0.4941,  0.1230, -0.0424, -0.2499, -0.4818,  0.1483, -0.0299,  0.0355]])), ('conv1.bias', tensor([ 0.1496, -0.1611, -0.1422, -0.1693, -0.4881, -0.2349, -0.1697, -0.1623,
        -0.4323, -0.0767, -0.3902, -0.0290, -0.1628, -0.1891, -0.3618, -0.2691])), ('conv2.weight', tensor([[ 0.3109, -0.7125],
        [-0.1851, -0.3386],
        [ 0.0432,  0.1405],
        [ 0.5268,  0.1880],
        [-0.2494, -0.0171],
        [ 0.2310,  0.3784],
        [-0.6220,  0.4840],
        [ 0.2324,  0.2996],
        [ 0.4842, -0.0443],
        [ 0.3352, -0.2567],
        [ 0.2241, -0.3112],
        [ 0.1771, -0.2673],
        [-0.4844, -0.0042],
        [ 0.2810,  0.2917],
        [ 0.1083,  0.4395],
        [ 0.5121,  0.5166]])), ('conv2.bias', tensor([ 0.0993, -0.0993]))])

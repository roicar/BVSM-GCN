import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
plt.rc('font',family='Times New Roman')

plt.rcParams['font.sans-serif'] = ['SimHei'] # 设置字体，不然中文无法显示
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams['figure.figsize'] = (12.0, 10.0) # 设置figure_size尺寸
#plt.rcParams['figure.figsize'] = (4.0, 4.0) # 设置figure_size尺寸


#figsize(12.5, 4) # 设置 figsize
plt.rcParams['savefig.dpi'] = 500 #保存图片分辨率
plt.rcParams['figure.dpi'] = 500  #分辨率
# 默认的像素：[6.0,4.0]，分辨率为100，图片尺寸为 600&400
# 指定dpi=200，图片尺寸为 1200*800
# 指定dpi=300，图片尺寸为 1800*1200
print(plt.style.available)
plt.style.use('fast')
#plt.rcParams['image.interpolation'] = 'nearest' # 设置 interpolation style
#plt.rcParams['image.cmap'] = 'gray' # 设置 颜色 style
# 参照下方配色方案，第三参数为颜色数量，这个例子的范围是3-12，每种配色方案参数范围不相同
#bmap = brewer2mpl.get_map('Set3', 'qualitative', 10)
#colors = bmap.mpl_colors
plt.figure()
plt.rcParams['font.sans-serif'] = ['Times New Roman']
#plt.rc('font', family='Times New Roman')
plt.rc('font', family='Times New Roman')
# 或者直接修改配色方案
#plt.rcParams['axes.color_cycle'] = colors
font_size = 24

data_methods = ['AIDS', 'BZR', 'COX2', 'DHFR']
data_results = {
    'AIDS': [69,68,63.2,83.2,55.6,55.8,89.1,76.4,55.7,85],
    #'BZR': [42.5,44.7,38.5,41.1,28.4,45,43.8,39.5,85.4,41.7],
    'BZR': [41.408, 41.504, 41.595, 41.658, 41.694, 41.696, 42.207, 42.253, 42.283, 42.319,
    42.325, 42.346, 42.362, 42.392, 42.397, 42.4, 42.403, 42.407, 42.409, 42.409,
    42.414, 42.418, 42.421, 42.427, 42.429, 42.438, 42.439, 42.445, 42.449, 42.452,
    42.452, 42.453, 42.454, 42.456, 42.461, 42.461, 42.462, 42.465, 42.465, 42.466,
    42.467, 42.47, 42.471, 42.473, 42.478, 42.48, 42.484, 42.488, 42.491, 42.492,
    42.494, 42.494, 42.498, 42.499, 42.499, 42.5, 42.51, 42.512, 42.513, 42.514,
    42.516, 42.52, 42.526, 42.528, 42.533, 42.54, 42.544, 42.55, 42.551, 42.554,
    42.558, 42.564, 42.565, 42.565, 42.58, 42.585, 42.585, 42.586, 42.599, 42.621,
    42.622, 42.623, 42.623, 42.64, 42.654, 42.658, 42.661, 42.681, 42.692, 42.697,
    42.706, 46.281, 47.451, 47.563, 47.996, 48.113, 49.027, 49.205, 49.295, 60.422,
    43.601, 43.605, 43.613, 43.629, 43.635, 43.691, 43.692, 43.693, 43.696, 43.700,
    43.701, 43.715, 43.716, 43.718, 43.727, 43.764, 43.785, 43.787, 43.809, 43.824,
    43.828, 43.836, 43.842, 43.860, 43.870, 43.931, 43.938, 44.506, 44.530, 44.533,
    44.549, 44.554, 44.555, 44.568, 44.573, 44.574, 44.582, 44.584, 44.596, 44.602,
    44.604, 44.612, 44.620, 44.620, 44.621, 44.624, 44.631, 44.640, 44.646, 44.649,
    44.663, 44.671, 44.682, 44.683, 44.684, 44.692, 44.692, 44.700, 44.702, 44.704,
    44.708, 44.711, 44.714, 44.739, 44.753, 44.757, 44.762, 44.764, 44.766, 44.804,
    44.821, 44.824, 44.835, 44.836, 44.856, 44.866, 44.891, 44.893, 44.911, 44.911,
    44.970, 45.213, 45.274, 48.782, 49.516, 49.792, 50.007, 50.037, 50.089, 50.289,
    50.326, 50.429, 50.540, 50.830, 50.893, 50.960, 51.333, 51.852, 56.072, 68.562,
    37.591, 37.602, 37.633, 37.634, 37.657, 37.665, 37.669, 37.674, 37.676, 37.689,
    37.707, 37.719, 37.733, 37.734, 37.740, 37.745, 37.752, 37.752, 37.754, 37.756,
    37.758, 37.788, 37.798, 37.799, 37.801, 37.824, 37.872, 37.948, 38.235, 38.280,
    38.314, 38.344, 38.364, 38.398, 38.403, 38.415, 38.418, 38.421, 38.428, 38.431,
    38.437, 38.443, 38.445, 38.453, 38.456, 38.458, 38.463, 38.480, 38.485, 38.485,
    38.488, 38.489, 38.490, 38.501, 38.507, 38.508, 38.511, 38.520, 38.523, 38.527,
    38.536, 38.538, 38.538, 38.545, 38.548, 38.551, 38.552, 38.558, 38.564, 38.582,
    38.588, 38.588, 38.591, 38.594, 38.614, 38.632, 38.638, 38.662, 38.693, 38.699,
    38.776, 39.318, 39.441, 39.674, 42.262, 42.911, 43.456, 43.469, 43.652, 43.829,
    44.085, 44.218, 44.707, 44.756, 44.948, 45.087, 45.089, 45.214, 45.994, 57.199,
    40.705, 40.764, 40.764, 40.796, 40.813, 40.822, 40.829, 40.841, 40.856, 40.86,
    40.861, 40.866, 40.867, 40.869, 40.876, 40.881, 40.883, 40.887, 40.889, 40.892,
    40.894, 40.894, 40.9, 40.901, 40.914, 40.919, 40.919, 40.923, 40.926, 40.928,
    40.93, 40.938, 40.947, 40.954, 40.954, 40.958, 40.961, 40.966, 40.967, 40.974,
    40.976, 40.981, 40.989, 40.996, 41.009, 41.01, 41.022, 41.027, 41.065, 41.073,
    41.087, 41.093, 41.116, 41.152, 41.195, 41.296, 41.485, 41.649, 41.655, 41.682,
    41.688, 41.699, 41.735, 41.745, 41.751, 41.763, 41.776, 41.791, 41.796, 41.811,
    41.825, 41.834, 41.842, 41.85, 41.851, 41.857, 41.905, 41.919, 42.655, 42.728,
    42.737, 42.77, 42.908, 43.035, 43.373, 43.382, 44.158, 46.563, 47.153, 47.16,
    47.27, 47.841, 48.008, 49.857, 49.91, 49.922, 50.046, 50.169, 54.479, 63.995,
    28.237, 28.243, 28.25, 28.255, 28.267, 28.275, 28.277, 28.277, 28.284, 28.292,
    28.296, 28.297, 28.297, 28.299, 28.308, 28.311, 28.313, 28.32, 28.322, 28.323,
    28.323, 28.325, 28.327, 28.329, 28.329, 28.333, 28.335, 28.336, 28.337, 28.34,
    28.34, 28.341, 28.343, 28.344, 28.345, 28.346, 28.348, 28.349, 28.35, 28.35,
    28.35, 28.354, 28.356, 28.356, 28.358, 28.358, 28.359, 28.36, 28.36, 28.364,
    28.367, 28.367, 28.367, 28.367, 28.371, 28.372, 28.372, 28.374, 28.379, 28.38,
    28.381, 28.384, 28.387, 28.395, 28.398, 28.41, 28.412, 28.413, 28.417, 28.418,
    28.418, 28.42, 28.42, 28.423, 28.425, 28.426, 28.427, 28.428, 28.428, 28.436,
    28.44, 28.44, 28.447, 28.458, 28.458, 28.47, 28.477, 28.5, 28.502, 28.513,
    28.613, 28.652, 28.802, 28.83, 29.324, 29.371, 29.592, 32.714, 53.086, 60.01,
    43.962, 44.018, 44.028, 44.035, 44.039, 44.041, 44.043, 44.045, 44.071, 44.083,
    44.087, 44.111, 44.118, 44.122, 44.127, 44.136, 44.152, 44.166, 44.172, 44.177,
    44.177, 44.189, 44.203, 44.21, 44.211, 44.211, 44.219, 44.239, 44.25, 44.265,
    44.274, 44.276, 44.278, 44.304, 44.313, 44.397, 44.406, 44.447, 44.647, 44.858,
    44.911, 44.919, 44.969, 44.988, 44.995, 45.01, 45.011, 45.014, 45.018, 45.023,
    45.029, 45.034, 45.038, 45.041, 45.044, 45.05, 45.054, 45.082, 45.084, 45.091,
    45.1, 45.111, 45.117, 45.124, 45.136, 45.137, 45.138, 45.141, 45.144, 45.148,
    45.154, 45.158, 45.164, 45.184, 45.192, 45.2, 45.215, 45.234, 45.248, 45.258,
    45.267, 45.278, 45.289, 45.29, 45.306, 45.43, 46.048, 49.628, 50.042, 50.317,
    50.531, 50.672, 51.202, 51.385, 51.504, 52.702, 53.28, 56.99, 57.083, 57.278,
    42.759, 42.77, 42.796, 42.81, 42.813, 42.832, 42.846, 42.85, 42.854, 42.882,
    42.887, 42.9, 42.905, 42.906, 42.925, 42.93, 42.936, 42.936, 42.941, 42.947,
    42.957, 42.963, 43.003, 43.018, 43.034, 43.051, 43.062, 43.078, 43.08, 43.553,
    43.6, 43.646, 43.714, 43.723, 43.732, 43.74, 43.753, 43.754, 43.776, 43.794,
    43.802, 43.811, 43.811, 43.812, 43.815, 43.821, 43.825, 43.829, 43.837, 43.839,
    43.842, 43.85, 43.856, 43.86, 43.862, 43.878, 43.883, 43.886, 43.888, 43.892,
    43.91, 43.913, 43.915, 43.931, 43.959, 43.976, 43.994, 44.545, 44.663, 44.702,
    44.724, 44.767, 44.776, 44.81, 44.821, 44.827, 44.832, 44.84, 44.846, 44.884,
    44.897, 44.956, 44.977, 44.979, 45.098, 45.142, 47.886, 48.665, 48.857, 49.57,
    49.625, 49.704, 49.836, 50.157, 50.293, 50.376, 50.568, 54.456, 56.15, 62.2,
    38.692, 38.704, 39.302, 39.31, 39.332, 39.337, 39.351, 39.353, 39.353, 39.359,
    39.365, 39.378, 39.382, 39.386, 39.39, 39.396, 39.4, 39.41, 39.415, 39.418,
    39.426, 39.429, 39.429, 39.431, 39.437, 39.439, 39.44, 39.441, 39.445, 39.446,
    39.448, 39.449, 39.45, 39.451, 39.452, 39.455, 39.455, 39.456, 39.461, 39.461,
    39.464, 39.476, 39.477, 39.483, 39.484, 39.487, 39.487, 39.488, 39.489, 39.491,
    39.493, 39.494, 39.496, 39.512, 39.518, 39.518, 39.522, 39.532, 39.536, 39.547,
    39.55, 39.557, 39.563, 39.567, 39.573, 39.576, 39.576, 39.58, 39.586, 39.603,
    39.636, 40.177, 40.178, 40.239, 40.261, 40.277, 40.287, 40.296, 40.305, 40.321,
    40.375, 40.385, 40.393, 40.4, 40.401, 40.424, 40.431, 40.437, 40.453, 40.473,
    40.577, 41.062, 41.5, 41.728, 42.559, 45.261, 45.763, 46.097, 53.472, 61.035,
    28.331, 28.399, 28.457, 28.583, 28.626, 28.834, 29.517, 30.164, 30.198, 32.24,
    51.27, 79.792, 79.914, 80.11, 81.438, 81.538, 81.623, 81.685, 81.733, 83.348,
    83.417, 83.422, 83.432, 83.44, 83.498, 83.505, 83.509, 83.542, 83.551, 83.569,
    83.581, 83.584, 83.616, 83.673, 83.677, 83.683, 83.687, 83.709, 83.758, 83.76,
    83.802, 83.829, 85.245, 85.326, 85.359, 85.397, 85.4, 85.401, 85.402, 85.414,
    85.423, 85.428, 85.435, 85.461, 85.466, 85.47, 85.476, 85.477, 85.486, 85.509,
    85.514, 85.521, 85.527, 85.531, 85.537, 85.543, 85.544, 85.544, 85.549, 85.554,
    85.559, 85.561, 85.574, 85.577, 85.578, 85.583, 85.583, 85.594, 85.595, 85.598,
    85.605, 85.608, 85.647, 85.659, 85.659, 85.727, 85.77, 85.775, 85.796, 85.838,
    86.832, 88.094, 89.241, 89.349, 90.115, 90.642, 91.016, 91.117, 95.336, 110.392,
    40.684, 40.811, 40.824, 40.83, 40.832, 40.839, 40.856, 40.871, 40.873, 40.881,
    40.882, 40.892, 40.893, 41.01, 41.011, 41.012, 41.016, 41.022, 41.03, 41.034,
    41.049, 41.054, 41.071, 41.077, 41.009, 41.035, 41.045, 41.052, 41.08, 41.085,
    41.099, 41.121, 41.57, 41.592, 41.625, 41.64, 41.649, 41.664, 41.672, 41.673,
    41.673, 41.677, 41.687, 41.69, 41.694, 41.699, 41.712, 41.716, 41.717, 41.727,
    41.734, 41.741, 41.746, 41.747, 41.748, 41.755, 41.783, 41.798, 41.799, 41.804,
    41.807, 41.811, 41.838, 41.838, 41.845, 41.854, 41.855, 41.871, 41.893, 41.897,
    41.904, 41.911, 41.928, 41.933, 41.934, 41.956, 41.969, 41.982, 42.107, 42.349,
    42.478, 42.624, 42.657, 42.685, 42.771, 42.795, 42.797, 45.916, 46.818, 46.844,
    47.138, 47.222, 47.364, 48.015, 48.117, 48.367, 48.518, 49.332, 49.616, 56.338
    ],
    'COX2': [64.3,46.1,45.4,77.9,65.0,61.4,66.0,43.6,46.6,66.9],
    'DHFR': [62.8,95.7,102.0,71.4,100.7,94.9,88.1,97.8,78.9,104.2]
}

BVSM = {
    'AIDS': 85.9,
    'BZR': 50,
    'COX2': 71,
    'DHFR': 121
}


# 创建画布和子图
fig, ax = plt.subplots(figsize=(10, 6))

# 绘制柱状图
bar_width = 0.3
index = np.arange(len(data_methods))


for i, method in enumerate(data_methods):
    plt.bar(index[i] - bar_width / 2, BVSM[method], bar_width, color='white', label=method, align='center', edgecolor='k', hatch='/')

# 绘制箱型图
box_data = [data_results[method] for method in data_methods]
ax.boxplot(box_data, positions=index + bar_width / 2, widths=bar_width, manage_ticks=False, showfliers=False)

# 设置轴标签和图例
ax.set_xticks(index,data_methods,size=18)
ax.set_xticklabels(data_methods)
#ax.set_xlabel('Methods',fontsize = 20)
#ax.set_ylabel('Values',fontsize = 20)

#plt.legend(loc='upper left', fontsize=18)

# 显示图形
#plt.tight_layout()
plt.savefig('intel4_RealDS_mklbatch2.pdf',format='pdf', dpi=1000)
#plt.show()

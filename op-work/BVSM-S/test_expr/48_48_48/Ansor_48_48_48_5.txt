----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 3
Sample Initial Population	#s: 1950	fail_ct: 8	Time elapsed: 1.20
GA Iter: 0	Max score: 0.9996	Min score: 0.9373	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9999	Min score: 0.9865	#Pop: 128	#M+: 1382	#M-: 74
EvolutionarySearch		#s: 128	Time elapsed: 5.61
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
Get 64 programs to measure:
................****************Computational DAG:
A = PLACEHOLDER [48, 48]
B = PLACEHOLDER [48, 48]
out(i, j) += (A[i, k]*B[k, j])


==================================================
No: 1	GFLOPS: 64.77 / 64.77	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696646674.03)
==================================================
Placeholder: A, B
out.local auto_unroll: 16
for j_c.1 (0,3)
  for k.0 (0,3)
    for i_c.2 (0,48)
      for k.1 (0,16)
        vectorize j_c.3 (0,16)
          out.local = ...
for i.1 (0,48)
  vectorize j.1 (0,48)
    out = ...

==================================================
No: 2	GFLOPS: 79.89 / 79.89	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.38, Tstamp:1696646674.31)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,24)
  for k.0 (0,2)
    for i_c.2 (0,6)
      for j_c.2 (0,2)
        for k.1 (0,24)
          vectorize j_c.3 (0,8)
            out.local = ...
  for i.2 (0,6)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 3	GFLOPS: 39.74 / 79.89	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.42, Tstamp:1696646674.59)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,48)
  for k.0 (0,6)
    for i_c.2 (0,3)
      for j_c.2 (0,8)
        for k.1 (0,8)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.2 (0,3)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 4	GFLOPS: 68.26 / 79.89	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.46, Tstamp:1696646674.93)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 16
  for i_c.1 (0,4)
    for j_c.1 (0,2)
      for k.0 (0,8)
        for k.1 (0,6)
          for i_c.3 (0,3)
            vectorize j_c.3 (0,12)
              out.local = ...
  for i.1 (0,12)
    for j.1 (0,24)
      out = ...

==================================================
No: 5	GFLOPS: 63.32 / 79.89	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.30, Tstamp:1696646675.15)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 64
  for i_c.1 (0,8)
    for j_c.1 (0,2)
      for k.0 (0,16)
        for k.1 (0,3)
          for i_c.3 (0,3)
            vectorize j_c.3 (0,6)
              out.local = ...
  for i.1 (0,24)
    vectorize j.1 (0,12)
      out = ...

==================================================
No: 6	GFLOPS: 62.66 / 79.89	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696646675.42)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,96)
  for k.0 (0,48)
    for i_c.2 (0,3)
      for i_c.3 (0,2)
        vectorize j_c.3 (0,4)
          out.local = ...
  for i.2 (0,6)
    vectorize j.2 (0,4)
      out = ...

==================================================
No: 7	GFLOPS: 99.67 / 99.67	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.43, Tstamp:1696646675.76)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,36)
  out.local auto_unroll: 16
  for k.0 (0,2)
    for i_c.2 (0,4)
      for j_c.2 (0,8)
        for k.1 (0,24)
          for i_c.3 (0,2)
            out.local = ...
  for i.2 (0,8)
    vectorize j.2 (0,8)
      out = ...

==================================================
No: 8	GFLOPS: 52.40 / 99.67	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.51, Tstamp:1696646676.11)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  out.local auto_unroll: 16
  for i_c.1 (0,2)
    for k.0 (0,24)
      for i_c.2 (0,2)
        for j_c.2 (0,3)
          for k.1 (0,2)
            for i_c.3 (0,12)
              vectorize j_c.3 (0,8)
                out.local = ...
  for i.1 (0,48)
    for j.1 (0,24)
      out = ...

==================================================
No: 9	GFLOPS: 25.02 / 99.67	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.44, Tstamp:1696646676.31)
==================================================
P................****************
laceholder: A, B
parallel i.0@j.0@ (0,4)
  for i_c.1 (0,12)
    for j_c.1 (0,24)
      for k.0 (0,48)
        vectorize j_c.3 (0,2)
          out.local = ...
  for i.1 (0,12)
    for j.1 (0,48)
      out = ...

==================================================
No: 10	GFLOPS: 67.77 / 99.67	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.45, Tstamp:1696646676.50)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,12)
  out.local auto_unroll: 64
  for j_c.1 (0,3)
    for i_c.2 (0,4)
      for j_c.2 (0,16)
        for k.1 (0,48)
          out.local = ...
  for i.1 (0,4)
    for j.1 (0,48)
      out = ...

==================================================
No: 11	GFLOPS: 26.48 / 99.67	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.45, Tstamp:1696646676.79)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  for i_c.1 (0,6)
    for k.0 (0,4)
      for i_c.2 (0,4)
        for j_c.2 (0,2)
          for k.1 (0,12)
            vectorize j_c.3 (0,12)
              out.local = ...
  for i.1 (0,24)
    for j.1 (0,24)
      out = ...

==================================================
No: 12	GFLOPS: 46.46 / 99.67	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.43, Tstamp:1696646677.04)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,6)
  out.local auto_unroll: 16
  for j_c.1 (0,4)
    for k.0 (0,24)
      for i_c.2 (0,4)
        for j_c.2 (0,6)
          for k.1 (0,2)
            for i_c.3 (0,2)
              vectorize j_c.3 (0,2)
                out.local = ...
  for i.1 (0,8)
    for j.1 (0,48)
      out = ...

==================================================
No: 13	GFLOPS: 133.59 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696646677.29)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,48)
  out.local auto_unroll: 16
  for k.0 (0,16)
    for k.1 (0,3)
      for j_c.3 (0,48)
        out.local = ...
  for j.2 (0,48)
    out = ...

==================================================
No: 14	GFLOPS: 33.92 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.09, Tstamp:1696646677.56)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,384)
  for k.0 (0,2)
    for i.2 (0,2)
      for k.1 (0,24)
        for i.3 (0,3)
          out = ...

==================================================
No: 15	GFLOPS: 109.26 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.28, Tstamp:1696646677.76)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,6)
  out.local auto_unroll: 16
  for k.0 (0,16)
    for i_c.2 (0,6)
      for j_c.2 (0,2)
        for k.1 (0,3)
          for i_c.3 (0,4)
            vectorize j_c.3 (0,8)
              out.local = ...
  for i.2 (0,24)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 16	GFLOPS: 90.55 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.56, Tstamp:1696646677.94)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,8)
  out.local auto_unroll: 512
  for k.0 (0,3)
    for i_c.2 (0,4)
      for j_c.2 (0,3)
        for k.1 (0,16)
          for i_c.3 (0,3)
            vectorize j_c.3 (0,8)
              out.local = ...
  for i.2 (0,12)
    for j.2 (0,24)
      out = ...

==================================================
No: 17	GFLOPS: 15.16 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.42, Tstamp:1696646680.55)
==================================================
Placeholder: A, B
parallel i.0@ (0,2)
  for j.0 (0,48)
    out.local auto_unroll: 64
    for k.0 (0,48)
      for i_c.2 (0,24)
        out.local = ...
    for i.1 (0,24)
      out = ...

==================================================
No: 18	GFLOPS: 86.11 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.27, Tstamp:1696646680.74)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,64)
  for k.0 (0,24)
    for i_c.2 (0,3)
      for k.1 (0,2)
        for i_c.3 (0,2)
          vectorize j_c.3 (0,6)
            out.local = ...
  for i.2 (0,6)
    vectorize j.2 (0,6)
      out = ...

==================================================
No: 19	GFLOPS: 45.65 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.42, Tstamp:1696646681.03)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 512
  for i_c.1 (0,48)
    for j_c.1 (0,12)
      for k.0 (0,8)
        for k.1 (0,6)
          out.local = ...
  for i.1 (0,48)
    vectorize j.1 (0,12)
      out = ...

==================================================
No: 20	GFLOPS: 69.90 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.31, Tstamp:1696646681.26)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,24)
  out.local auto_unroll: 64
  for k.0 (0,24)
    for j_c.2 (0,12)
      for k.1 (0,2)
        for i_c.3 (0,8)
          out.local = ...
  for i.2 (0,8)
    vectorize j.2 (0,12)
      out = ...

==================================================
No: 21	GFLOPS: 60.95 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.39, Tstamp:1696646681.54)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 64
  for i_c.1 (0,4)
    for j_c.1 (0,2)
      for j_c.2 (0,3)
        for k.1 (0,48)
          for i_c.3 (0,6)
            vectorize j_c.3 (0,2)
              out.local = ...
  for i.1 (0,24)
    vectorize j.1 (0,12)
      out = ...

==================================================
No: 22	GFLOPS: 16.63 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696646681.82)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,576)
  for i_c.2 (0,2)
    for k.1 (0,48)
      vectorize j_c.3 (0,2)
        out.local = ...
  for i.2 (0,2)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 23	GFLOPS: 78.97 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.43, Tstamp:1696646682.11)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,144)
  for k.0 (0,12)
    for j.2 (0,4)
      for k.1 (0,4)
        for i.3 (0,4)
          out = ...

==================================================
No: 24	GFLOPS: 33.16 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.49, Tstamp:1696646682.40)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@ (0,24)
  for j.1 (0,2)
    for k.0 (0,48)
      for j.2 (0,4)
        for i.3 (0,12)
          out = ...

==================================================
No: 25	GFLOPS: 80.20 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.46, Tstamp:1696646682.58)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 512
  for i_c.1 (0,6)
    for j_c.1 (0,2)
      for k.0 (0,24)
        for j_c.2 (0,12)
          for k.1 (0,2)
            for i_c.3 (0,4)
              out.local = ...
  for i.1 (0,24)
    for j.1 (0,24)
      out = ...

==================================================
No: 26	GFLOPS: 33.68 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696646682.86)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,384)
  for i.2 (0,2)
    for k.1 (0,48)
      vectorize j.3 (0,3)
        out = ...

==================================================
No: 27	GFLOPS: 51.26 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.26, Tstamp:1696646683.05)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1................****************
@ (0,36)
  for k.0 (0,2)
    for i.2 (0,2)
      for k.1 (0,24)
        for i.3 (0,4)
          vectorize j.3 (0,8)
            out = ...

==================================================
No: 28	GFLOPS: 12.14 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.39, Tstamp:1696646683.33)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,288)
  for i.1 (0,8)
    out.local auto_unroll: 64
    for k.0 (0,24)
      for k.1 (0,2)
        out.local = ...
    out = ...

==================================================
No: 29	GFLOPS: 44.45 / 133.59	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696646683.54)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,12)
  out.local auto_unroll: 64
  for i_c.1 (0,8)
    for k.0 (0,24)
      for i_c.2 (0,6)
        for j_c.2 (0,4)
          for k.1 (0,2)
            out.local = ...
  for i.1 (0,48)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 30	GFLOPS: 152.78 / 152.78	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.46, Tstamp:1696646683.87)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,72)
  for k.0 (0,4)
    for i.2 (0,2)
      for k.1 (0,12)
        for i.3 (0,2)
          vectorize j.3 (0,8)
            out = ...

==================================================
No: 31	GFLOPS: 81.64 / 152.78	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.40, Tstamp:1696646684.05)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,12)
  out.local auto_unroll: 512
  for k.0 (0,12)
    for i_c.2 (0,16)
      for j_c.2 (0,2)
        for k.1 (0,4)
          vectorize j_c.3 (0,6)
            out.local = ...
  for i.1 (0,16)
    vectorize j.1 (0,12)
      out = ...

==================================================
No: 32	GFLOPS: 71.93 / 152.78	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.47, Tstamp:1696646684.33)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  for j_c.1 (0,8)
    for k.0 (0,8)
      for i_c.2 (0,3)
        for j_c.2 (0,2)
          for k.1 (0,6)
            for i_c.3 (0,2)
              vectorize j_c.3 (0,3)
                out.local = ...
  for i.1 (0,6)
    for j.1 (0,48)
      out = ...

==================================================
No: 33	GFLOPS: 63.62 / 152.78	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.76, Tstamp:1696646687.79)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,12)
  out.local auto_unroll: 512
  for i_c.1 (0,8)
    for j_c.1 (0,3)
      for k.0 (0,16)
        for k.1 (0,3)
          vectorize j_c.3 (0,8)
            out.local = ...
  for i.1 (0,8)
    for j.1 (0,24)
      out = ...

==================================================
No: 34	GFLOPS: 123.43 / 152.78	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.28, Tstamp:1696646687.96)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,8)
  for k.0 (0,48)
    for i_c.2 (0,3)
      for j_c.2 (0,24)
        for i_c.3 (0,4)
          out.local = ...
  for i.2 (0,12)
    vectorize j.2 (0,24)
      out = ...

==================================================
No: 35	GFLOPS: 176.75 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.51, Tstamp:1696646688.30)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,3)
  out.local auto_unroll: 16
  for i_c.1 (0,8)
    for k.0 (0,4)
      for j_c.2 (0,6)
        for k.1 (0,12)
          for i_c.3 (0,2)
            vectorize j_c.3 (0,8)
              out.local = ...
  for i.1 (0,16)
    for j.1 (0,48)
      out = ...

==================================================
No: 36	GFLOPS: 57.14 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.54, Tstamp:1696646688.58)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  for i_c.1 (0,4)
    for j_c.1 (0,8)
      for k.0 (0,2)
        for i_c.2 (0,2)
          for k.1 (0,24)
            for i_c.3 (0,3)
              vectorize j_c.3 (0,6)
                out.local = ...
  for i.1 (0,24)
    for j.1 (0,48)
      out = ...

==================================================
No: 37	GFLOPS: 29.15 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.19, Tstamp:1696646688.71)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,96)
  for j.1 (0,8)
    out.local auto_unroll: 16
    for k.0 (0,12)
      for j_c.2 (0,3)
        for k.1 (0,4)
          out.local = ...
    vectorize j.2 (0,3)
      out = ...

==================================================
No: 38	GFLOPS: 96.26 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696646688.89)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,12)
  out.local auto_unroll: 64
  for k.0 (0,24)
    for j_c.2 (0,3)
      for k.1 (0,2)
        for i_c.3 (0,8)
          vectorize j_c.3 (0,8)
            out.local = ...
  for i.2 (0,8)
    for j.2 (0,24)
      out = ...

==================================================
No: 39	GFLOPS: 115.28 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696646689.09)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,6)
  out.local auto_unroll: 16
  for i_c.1 (0,4)
    for j_c.1 (0,2)
      for i_c.2 (0,2)
        for k.1 (0,48)
          for j_c.3 (0,24)
            out.local = ...
  for i.1 (0,8)
    for j.1 (0,48)
      out = ...

==================================================
No: 40	GFLOPS: 65.93 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.53, Tstamp:1696646689.43)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 64
  for i_c.1 (0,2)
    for k.0 (0,4)
      for i_c.2 (0,6)
        for k.1 (0,12)
          for i_c.3 (0,4)
            vectorize j_c.3 (0,12)
              out.local = ...
  for i.1 (0,48)
    vectorize j.1 (0,12)
      out = ...

==================================================
No: 41	GFLOPS: 29.66 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696646689.72)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  out.local auto_unroll: 64
  for k.0 (0,48)
    for i_c.2 (0,24)
      for j_c.2 (0,3)
        for i_c.3 (0,2)
          out.local = ...
  for i.2 (0,48)
    vectorize j.2 (0,3)
      out = ...

==================================================
No: 42	GFLOPS: 77.68 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696646689.90)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 64
  for j_c.1 (0,4)
    for k.0 (0,3)
      for i_c.2 (0,4)
        for k.1 (0,16)
          for i_c.3 (0,6)
            vectorize j_c.3 (0,6)
              out.local = ...
  for i.1 (0,24)
    for j.1 (0,24)
      out = ...

==================================================
No: 43	GFLOPS: 53.80 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.25, Tstamp:1696646690.10)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,192)
  out.local auto_unroll: 64
  for k.0 (0,16)
    for k.1 (0,3)
      for i_c.3 (0,2)
        vectorize j_c.3 (0,6)
          out.local = ...
  for i.2 (0,2)
    vectorize j.2 (0,6)
      out = ...

==================================================
No: 44	GFLOPS: 56.28 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.23, Tstamp:1696646690.39)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,192)
  for k.0 (0,48)
    for i.2 (0,2)
      for j.2 (0,2)
        vectorize j.3 (0,3)
          out = ...

========================................****************
==========================
No: 45	GFLOPS: 91.33 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.43, Tstamp:1696646690.73)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,8)
  for k.0 (0,2)
    for i.2 (0,12)
      for j.2 (0,3)
        for k.1 (0,24)
          vectorize j.3 (0,8)
            out = ...

==================================================
No: 46	GFLOPS: 69.99 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.39, Tstamp:1696646690.97)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,12)
  out.local auto_unroll: 512
  for k.0 (0,24)
    for i_c.2 (0,2)
      for j_c.2 (0,3)
        for k.1 (0,2)
          for i_c.3 (0,8)
            vectorize j_c.3 (0,4)
              out.local = ...
  for i.2 (0,16)
    vectorize j.2 (0,12)
      out = ...

==================================================
No: 47	GFLOPS: 22.39 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.39, Tstamp:1696646691.24)
==================================================
Placeholder: A, B
out.local auto_unroll: 512
for i_c.1 (0,2)
  for j_c.1 (0,4)
    for k.0 (0,24)
      for i_c.2 (0,8)
        for j_c.2 (0,6)
          for k.1 (0,2)
            for i_c.3 (0,3)
              vectorize j_c.3 (0,2)
                out.local = ...
for i.1 (0,48)
  vectorize j.1 (0,48)
    out = ...

==================================================
No: 48	GFLOPS: 94.14 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.24, Tstamp:1696646691.37)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@ (0,192)
  for k.0 (0,8)
    for k.1 (0,6)
      vectorize j.3 (0,12)
        out = ...

==================================================
No: 49	GFLOPS: 27.31 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.39, Tstamp:1696646694.71)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,4)
  for k.0 (0,24)
    for i.2 (0,6)
      for j.2 (0,16)
        for k.1 (0,2)
          for i.3 (0,2)
            vectorize j.3 (0,3)
              out = ...

==================================================
No: 50	GFLOPS: 51.98 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.21, Tstamp:1696646694.85)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,144)
  for k.0 (0,8)
    for j_c.2 (0,4)
      for k.1 (0,6)
        vectorize j_c.3 (0,4)
          out.local = ...
  vectorize j.1 (0,16)
    out = ...

==================================================
No: 51	GFLOPS: 1.18 / 176.75	results: MeasureResult(cost:[0.0002], error_no:0, all_cost:1.44, Tstamp:1696646695.14)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,2)
  for k.0 (0,24)
    for i.2 (0,3)
      for j.2 (0,24)
        for k.1 (0,2)
          for i.3 (0,16)
            out = ...

==================================================
No: 52	GFLOPS: 50.80 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696646695.42)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,48)
  for j_c.1 (0,6)
    for k.0 (0,6)
      for j_c.2 (0,4)
        for k.1 (0,8)
          vectorize j_c.3 (0,2)
            out.local = ...
  vectorize j.1 (0,48)
    out = ...

==================================================
No: 53	GFLOPS: 82.02 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.38, Tstamp:1696646695.67)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,6)
  out.local auto_unroll: 16
  for i_c.2 (0,4)
    for j_c.2 (0,2)
      for k.1 (0,48)
        for i_c.3 (0,12)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.2 (0,48)
    vectorize j.2 (0,8)
      out = ...

==================================================
No: 54	GFLOPS: 94.75 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.38, Tstamp:1696646695.84)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  for j_c.1 (0,4)
    for k.0 (0,4)
      for j_c.2 (0,2)
        for k.1 (0,12)
          for i_c.3 (0,6)
            vectorize j_c.3 (0,6)
              out.local = ...
  for i.1 (0,6)
    for j.1 (0,48)
      out = ...

==================================================
No: 55	GFLOPS: 33.35 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696646696.12)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,192)
  for j_c.1 (0,3)
    for k.0 (0,4)
      for j_c.2 (0,4)
        for k.1 (0,12)
          out.local = ...
  vectorize j.1 (0,12)
    out = ...

==================================================
No: 56	GFLOPS: 53.33 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.42, Tstamp:1696646696.35)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,12)
  out.local auto_unroll: 512
  for i_c.1 (0,2)
    for j_c.1 (0,6)
      for k.0 (0,48)
        for i_c.3 (0,8)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.1 (0,16)
    vectorize j.1 (0,12)
      out = ...

==================================================
No: 57	GFLOPS: 4.35 / 176.75	results: MeasureResult(cost:[0.0001], error_no:0, all_cost:0.36, Tstamp:1696646696.63)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,192)
  for j.1 (0,2)
    for k.0 (0,2)
      for k.1 (0,24)
        for i.3 (0,2)
          vectorize j.3 (0,3)
            out = ...

==================================================
No: 58	GFLOPS: 145.53 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.42, Tstamp:1696646696.80)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,6)
  out.local auto_unroll: 64
  for k.0 (0,3)
    for i_c.2 (0,2)
      for j_c.2 (0,2)
        for k.1 (0,16)
          for i_c.3 (0,4)
            for j_c.3 (0,24)
              out.local = ...
  for i.2 (0,8)
    for j.2 (0,48)
      out = ...

==================================================
No: 59	GFLOPS: 59.27 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.29, Tstamp:1696646697.02)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,288)
  for k.0 (0,48)
    for j.2 (0,4)
      vectorize j.3 (0,2)
        out = ...

==================================================
No: 60	GFLOPS: 2.72 / 176.75	results: MeasureResult(cost:[0.0001], error_no:0, all_cost:0.39, Tstamp:1696646697.30)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@ (0,32)
  for k.0 (0,6)
    for k.1 (0,8)
      for i.3 (0,24)
        vectorize j.3 (0,3)
          out = ...

==================================================
No: 61	GFLOPS: 33.18 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.50, Tstamp:1696646697.59)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,24)
  out.local auto_unroll: 512
  for i_c.1 (0,3)
    for k.0 (0,24)
      for i_c.2 (0,2)
        for j_c.2 (0,2)
          for k.1 (0,2)
            for i_c.3 (0,8)
              out.local = ...
  for i.1 (0,48)
    vectorize j.1 (0,2)
      out = ...

==================================================
No: 62	GFLOPS: 105.87 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.38, Tstamp:1696646697.77)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  for k.0 (0,12)
    for i_c.2 (0,3)
      for k.1 (0,4)
        for i_c.3 (0,2)
          for j_c.3 (0,24)
            out.local = ...
  for i.2 (0,6)
    for j.2 (0,24)
      out = ...

==================================================
No: 63	GFLOPS: 47.05 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.93, Tstamp:1696646698.04)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 512
  for i_c.1 (0,3)
    for j_c.1 (0,24)
      for k.0 (0,3)
        for i_c.2 (0,4)
          for k.1 (0,16)
            vectorize j_c.3 (0,2)
              out.local = ...
  for i.1 (0,12)
    for j.1 (0,48)
      out = ...

==================================================
No: 64	GFLOPS: 12.77 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.82, Tstamp:1696646698.17)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,384)
  out.local auto_unroll: 512
  for i_c.2 (0,3)
    for k.1 (0,48)
      for i_c.3 (0,2)
        out.local = ...
  for i.2 (0,6)
    out = ...

Time elapsed for measurement: 27.20 s
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.14 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 1956	fail_ct: 14	Time elapsed: 1.32
GA Iter: 0	Max score: 0.9983	Min score: 0.9366	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9999	Min score: 0.9883	#Pop: 128	#M+: 1380	#M-: 68
EvolutionarySearch		#s: 128	Time elapsed: 5.71
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
Get 36 programs to measure:
................****************
==================================================
No: 65	GFLOPS: 64.05 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696646708.46)
==================================================
Placeholder: A, B
out auto_unroll: 16
for k.0 (0,8)
  for i.2 (0,2)
    for k.1 (0,6)
      for i.3 (0,24)
        for j.3 (0,48)
          out = ...

==================================================
No: 66	GFLOPS: 42.98 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.40, Tstamp:1696646708.59)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,3)
  out.local auto_unroll: 16
  for i_c.1 (0,2)
    for j_c.1 (0,16)
      for k.0 (0,4)
        for i_c.2 (0,8)
          for k.1 (0,12)
            vectorize j_c.3 (0,3)
              out.local = ...
  for i.1 (0,16)
    for j.1 (0,48)
      out = ...

==================================================
No: 67	GFLOPS: 92.24 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.44, Tstamp:1696646708.92)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,192)
  for k.0 (0,16)
    for k.1 (0,3)
      vectorize j.3 (0,12)
        out = ...

==================================================
No: 68	GFLOPS: 24.44 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.19, Tstamp:1696646709.05)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,96)
  for j.1 (0,8)
    out.local auto_unroll: 64
    for k.0 (0,24)
      for k.1 (0,2)
        for i_c.3 (0,3)
          out.local = ...
    for i.2 (0,3)
      out = ...

==================================================
No: 69	GFLOPS: 58.11 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.53, Tstamp:1696646709.33)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,16)
  out.local auto_unroll: 512
  for i_c.1 (0,2)
    for k.0 (0,12)
      for i_c.2 (0,3)
        for j_c.2 (0,8)
          for k.1 (0,4)
            vectorize j_c.3 (0,3)
              out.local = ...
  for i.1 (0,6)
    for j.1 (0,24)
      out = ...

==================================================
No: 70	GFLOPS: 70.24 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.25, Tstamp:1696646709.50)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,36)
  for k.0 (0,16)
    for i.2 (0,2)
      for j.2 (0,2)
        for k.1 (0,3)
          for i.3 (0,2)
            vectorize j.3 (0,8)
              out = ...

==================================================
No: 71	GFLOPS: 29.92 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.22, Tstamp:1696646709.63)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,8)
  out.local auto_unroll: 64
  for k.0 (0,48)
    for i_c.2 (0,16)
      for j_c.2 (0,2)
        for i_c.3 (0,3)
          vectorize j_c.3 (0,3)
            out.local = ...
  for i.2 (0,48)
    vectorize j.2 (0,6)
      out = ...

==================================================
No: 72	GFLOPS: 65.30 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.23, Tstamp:1696646709.77)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,64)
  out.local auto_unroll: 16
  for k.0 (0,6)
    for i_c.2 (0,2)
      for k.1 (0,8)
        for i_c.3 (0,6)
          vectorize j_c.3 (0,3)
            out.local = ...
  for i.2 (0,12)
    vectorize j.2 (0,3)
      out = ...

==================================================
No: 73	GFLOPS: 27.43 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696646709.90)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,8)
  for k.0 (0,2)
    for i.2 (0,48)
      for j.2 (0,2)
        for k.1 (0,24)
          vectorize j.3 (0,3)
            out = ...

=================================================................****************
=
No: 74	GFLOPS: 112.90 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.84, Tstamp:1696646710.08)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,3)
  out.local auto_unroll: 512
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for k.0 (0,4)
        for i_c.2 (0,24)
          for k.1 (0,12)
            vectorize j_c.3 (0,8)
              out.local = ...
  for i.1 (0,48)
    vectorize j.1 (0,16)
      out = ...

==================================================
No: 75	GFLOPS: 13.66 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.10, Tstamp:1696646710.39)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,144)
  for k.0 (0,2)
    for i.2 (0,16)
      for k.1 (0,24)
        out = ...

==================================================
No: 76	GFLOPS: 118.49 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.26, Tstamp:1696646710.58)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,96)
  for k.1 (0,48)
    for i.3 (0,3)
      vectorize j.3 (0,8)
        out = ...

==================================================
No: 77	GFLOPS: 34.96 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.06, Tstamp:1696646710.85)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,144)
  out.local auto_unroll: 512
  for i_c.2 (0,2)
    for j_c.2 (0,2)
      for k.1 (0,48)
        vectorize j_c.3 (0,4)
          out.local = ...
  for i.2 (0,2)
    vectorize j.2 (0,8)
      out = ...

==================================================
No: 78	GFLOPS: 31.46 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.19, Tstamp:1696646710.98)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,48)
  for k.0 (0,24)
    for j_c.2 (0,2)
      for k.1 (0,2)
        vectorize j_c.3 (0,24)
          out.local = ...
  vectorize j.2 (0,48)
    out = ...

==================================================
No: 79	GFLOPS: 92.04 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.40, Tstamp:1696646711.21)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,12)
  out.local auto_unroll: 64
  for i_c.1 (0,8)
    for k.0 (0,2)
      for j_c.2 (0,12)
        for k.1 (0,24)
          for i_c.3 (0,2)
            out.local = ...
  for i.1 (0,16)
    for j.1 (0,12)
      out = ...

==================================================
No: 80	GFLOPS: 44.34 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696646711.49)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,576)
  for k.0 (0,6)
    for k.1 (0,8)
      vectorize j.3 (0,4)
        out = ...

==================================================
No: 81	GFLOPS: 18.29 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.25, Tstamp:1696646715.41)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,24)
  for i.2 (0,12)
    for j.2 (0,2)
      for k.1 (0,48)
        for i.3 (0,4)
          out = ...

==================================================
No: 82	GFLOPS: 15.14 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.40, Tstamp:1696646715.75)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,192)
  for j.1 (0,3)
    for k.0 (0,24)
      for k.1 (0,2)
        for i_c.3 (0,4)
          out.local = ...
    for i.2 (0,4)
      out = ...

==================================================
No: 83	GFLOPS: 101.25 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696646715.98)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,36)
  out.local auto_unroll: 16
  for j_c.1 (0,2)
    for k.0 (0,48)
      for i_c.2 (0,2)
        for i_c.3 (0,4)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.1 (0,8)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 84	GFLOPS: 33.43 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.52, Tstamp:1696646716.26)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,12)
  out.local auto_unroll: 64
  for i_c.1 (0,2)
    for j_c.1 (0,3)
      for j_c.2 (0,8)
        for k.1 (0,48)
          for i_c.3 (0,4)
            out.local = ...
  for i.1 (0,8)
    for j.1 (0,24)
      out = ...

==================================================
No: 85	GFLOPS: 58.83 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:2.22, Tstamp:1696646716.50)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,72)
  out.local auto_unroll: 512
  for k.0 (0,2)
    for i_c.2 (0,2)
      for j_c.2 (0,2)
        for k.1 (0,24)
          for i_c.3 (0,2)
            vectorize j_c.3 (0,4)
              out.local = ...
  for i.2 (0,4)
    vectorize j.2 (0,8)
      out = ...

==================================================
No: 86	GFLOPS: 1.83 / 176.75	results: MeasureResult(cost:[0.0001], error_no:0, all_cost:0.21, Tstamp:1696646716.64)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,24)
  for k.0 (0,24)
    for i.2 (0,48)
      for j.2 (0,2)
        for k.1 (0,2)
          out = ...

==================================================
No: 87	GFLOPS: 25.46 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.31, Tstamp:1696646716.77)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  out.local auto_unroll: 64
  for j_c.1 (0,8)
    for k.0 (0,48)
      for i_c.2 (0,8)
        for j_c.2 (0,6)
          for i_c.3 (0,3)
            out.local = ...
  for i.1 (0,24)
    for j.1 (0,48)
      out = ...

==================================================
No: 88	GFLOPS: 61.38 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.82, Tstamp:1696646717.05)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  out.local auto_unroll: 512
  for k.0 (0,2)
    for i_c.2 (0,8)
      for j_c.2 (0,6)
        for k.1 (0,24)
          for i_c.3 (0,3)
            vectorize j_c.3 (0,8)
              out.local = ...
  for i.1 (0,24)
    vectorize j.1 (0,48)
      out = ...

==================================================
No: 89	GFLOPS: 99.87 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696646717.28)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,4)
  out.local auto_unroll: 16
  for k.0 (0,4)
    for i_c.2 (0,6)
      for j_c.2 (0,12)
        for k.1 (0,12)
          for i_c.3 (0,2)
            vectorize j_c.3 (0,4)
              out.local = ...
  for i.2 (0,12)
    vectorize j.2 (0,48)
      out = ...

==================================================
No: 90	GFLOPS: 53.38 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.39, Tstamp:1696646717.57)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,384)
  for k.0 (0,2)
    for j.2 (0,3)
      for k.1 (0,24)
        vectorize j.3 (0,2)
          out = ...

==================================================
No: 91	GFLOPS: 107.35 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.29, Tstamp:1696646717.73)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,36)
  for k.0 (0,24)
    for i.2 (0,2)
      for j.2 (0,16)
        for k.1 (0,2)
          for i.3 (0,2)
            out = ...

==================================================
No: 92	GFLOPS: 28.93 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696646718.00)
==================================================
Placeholder: A, B
parall....****
el i.0@j.0@ (0,144)
  out.local auto_unroll: 64
  for i_c.1 (0,2)
    for j_c.2 (0,2)
      for k.1 (0,48)
        for i_c.3 (0,4)
          out.local = ...
  for i.1 (0,8)
    vectorize j.1 (0,2)
      out = ...

==================================================
No: 93	GFLOPS: 26.54 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.23, Tstamp:1696646718.13)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,36)
  out.local auto_unroll: 64
  for j_c.2 (0,4)
    for k.1 (0,48)
      for i_c.3 (0,16)
        out.local = ...
  for i.2 (0,16)
    vectorize j.2 (0,4)
      out = ...

==================================================
No: 94	GFLOPS: 21.07 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.23, Tstamp:1696646718.26)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@ (0,144)
  for k.0 (0,24)
    for i.2 (0,8)
      for k.1 (0,2)
        for i.3 (0,2)
          out = ...

==================================================
No: 95	GFLOPS: 50.62 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.47, Tstamp:1696646718.61)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@ (0,192)
  for j.1 (0,2)
    for k.0 (0,24)
      for k.1 (0,2)
        vectorize j.3 (0,6)
          out = ...

==================================================
No: 96	GFLOPS: 2.49 / 176.75	results: MeasureResult(cost:[0.0001], error_no:0, all_cost:0.41, Tstamp:1696646718.74)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,24)
  for k.0 (0,8)
    for j.2 (0,2)
      for k.1 (0,6)
        for i.3 (0,48)
          out = ...

==================================================
No: 97	GFLOPS: 1.30 / 176.75	results: MeasureResult(cost:[0.0002], error_no:0, all_cost:0.26, Tstamp:1696646721.87)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,4)
  for k.0 (0,6)
    for i.2 (0,16)
      for j.2 (0,12)
        for k.1 (0,8)
          for i.3 (0,3)
            out = ...

==================================================
No: 98	GFLOPS: 58.91 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.69, Tstamp:1696646722.10)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,16)
  out.local auto_unroll: 512
  for i_c.1 (0,4)
    for j_c.1 (0,3)
      for k.0 (0,6)
        for j_c.2 (0,2)
          for k.1 (0,8)
            for i_c.3 (0,3)
              vectorize j_c.3 (0,2)
                out.local = ...
  for i.1 (0,12)
    vectorize j.1 (0,12)
      out = ...

==================================================
No: 99	GFLOPS: 70.44 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696646722.32)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,6)
  for k.0 (0,48)
    for i_c.2 (0,4)
      for j_c.2 (0,12)
        for i_c.3 (0,2)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.1 (0,8)
    for j.1 (0,48)
      out = ...

==================================================
No: 100	GFLOPS: 92.77 / 176.75	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.18, Tstamp:1696646722.60)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,72)
  for k.1 (0,48)
    for i.3 (0,8)
      vectorize j.3 (0,4)
        out = ...

Time elapsed for measurement: 17.23 s
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((48, 48), "float32"), B: T.Buffer((48, 48), "float32"), out: T.Buffer((48, 48), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        for i_outer_outer_outer_j_outer_outer_outer_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused in T.parallel(24):
            cse_var_1: T.int32 = i_outer_outer_outer_j_outer_outer_outer_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 6 * 576 + i_outer_outer_outer_j_outer_outer_outer_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 6 * 8
            out_1 = T.Buffer((2304,), data=out.data)
            out_1[cse_var_1:cse_var_1 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 48:cse_var_1 + 48 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 96:cse_var_1 + 96 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 144:cse_var_1 + 144 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 192:cse_var_1 + 192 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 240:cse_var_1 + 240 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 288:cse_var_1 + 288 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 336:cse_var_1 + 336 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 384:cse_var_1 + 384 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 432:cse_var_1 + 432 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 480:cse_var_1 + 480 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 528:cse_var_1 + 528 + 8] = T.Broadcast(T.float32(0), 8)
            for k_outer in range(16):
                cse_var_16: T.int32 = cse_var_1 + 96
                cse_var_15: T.int32 = cse_var_1 + 528
                cse_var_14: T.int32 = cse_var_1 + 480
                cse_var_13: T.int32 = cse_var_1 + 48
                cse_var_12: T.int32 = cse_var_1 + 432
                cse_var_11: T.int32 = cse_var_1 + 384
                cse_var_10: T.int32 = cse_var_1 + 336
                cse_var_9: T.int32 = cse_var_1 + 288
                cse_var_8: T.int32 = cse_var_1 + 240
                cse_var_7: T.int32 = cse_var_1 + 192
                cse_var_6: T.int32 = cse_var_1 + 144
                cse_var_5: T.int32 = k_outer * 144 + i_outer_outer_outer_j_outer_outer_outer_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 6 * 8
                cse_var_4: T.int32 = i_outer_outer_outer_j_outer_outer_outer_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 6 * 576 + k_outer * 3
                cse_var_3: T.int32 = cse_var_5 + 96
                cse_var_2: T.int32 = cse_var_5 + 48
                A_1 = T.Buffer((2304,), data=A.data)
                B_1 = T.Buffer((2304,), data=B.data)
                out_1[cse_var_1:cse_var_1 + 8] = out_1[cse_var_1:cse_var_1 + 8] + T.Broadcast(A_1[cse_var_4], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_13:cse_var_13 + 8] = out_1[cse_var_13:cse_var_13 + 8] + T.Broadcast(A_1[cse_var_4 + 48], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_16:cse_var_16 + 8] = out_1[cse_var_16:cse_var_16 + 8] + T.Broadcast(A_1[cse_var_4 + 96], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_1:cse_var_1 + 8] = out_1[cse_var_1:cse_var_1 + 8] + T.Broadcast(A_1[cse_var_4 + 1], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_13:cse_var_13 + 8] = out_1[cse_var_13:cse_var_13 + 8] + T.Broadcast(A_1[cse_var_4 + 49], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_16:cse_var_16 + 8] = out_1[cse_var_16:cse_var_16 + 8] + T.Broadcast(A_1[cse_var_4 + 97], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_1:cse_var_1 + 8] = out_1[cse_var_1:cse_var_1 + 8] + T.Broadcast(A_1[cse_var_4 + 2], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_13:cse_var_13 + 8] = out_1[cse_var_13:cse_var_13 + 8] + T.Broadcast(A_1[cse_var_4 + 50], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_16:cse_var_16 + 8] = out_1[cse_var_16:cse_var_16 + 8] + T.Broadcast(A_1[cse_var_4 + 98], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_6:cse_var_6 + 8] = out_1[cse_var_6:cse_var_6 + 8] + T.Broadcast(A_1[cse_var_4 + 144], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_7:cse_var_7 + 8] = out_1[cse_var_7:cse_var_7 + 8] + T.Broadcast(A_1[cse_var_4 + 192], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_8:cse_var_8 + 8] = out_1[cse_var_8:cse_var_8 + 8] + T.Broadcast(A_1[cse_var_4 + 240], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_6:cse_var_6 + 8] = out_1[cse_var_6:cse_var_6 + 8] + T.Broadcast(A_1[cse_var_4 + 145], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_7:cse_var_7 + 8] = out_1[cse_var_7:cse_var_7 + 8] + T.Broadcast(A_1[cse_var_4 + 193], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_8:cse_var_8 + 8] = out_1[cse_var_8:cse_var_8 + 8] + T.Broadcast(A_1[cse_var_4 + 241], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_6:cse_var_6 + 8] = out_1[cse_var_6:cse_var_6 + 8] + T.Broadcast(A_1[cse_var_4 + 146], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_7:cse_var_7 + 8] = out_1[cse_var_7:cse_var_7 + 8] + T.Broadcast(A_1[cse_var_4 + 194], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_8:cse_var_8 + 8] = out_1[cse_var_8:cse_var_8 + 8] + T.Broadcast(A_1[cse_var_4 + 242], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_9:cse_var_9 + 8] = out_1[cse_var_9:cse_var_9 + 8] + T.Broadcast(A_1[cse_var_4 + 288], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_10:cse_var_10 + 8] = out_1[cse_var_10:cse_var_10 + 8] + T.Broadcast(A_1[cse_var_4 + 336], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_11:cse_var_11 + 8] = out_1[cse_var_11:cse_var_11 + 8] + T.Broadcast(A_1[cse_var_4 + 384], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_9:cse_var_9 + 8] = out_1[cse_var_9:cse_var_9 + 8] + T.Broadcast(A_1[cse_var_4 + 289], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_10:cse_var_10 + 8] = out_1[cse_var_10:cse_var_10 + 8] + T.Broadcast(A_1[cse_var_4 + 337], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_11:cse_var_11 + 8] = out_1[cse_var_11:cse_var_11 + 8] + T.Broadcast(A_1[cse_var_4 + 385], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_9:cse_var_9 + 8] = out_1[cse_var_9:cse_var_9 + 8] + T.Broadcast(A_1[cse_var_4 + 290], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_10:cse_var_10 + 8] = out_1[cse_var_10:cse_var_10 + 8] + T.Broadcast(A_1[cse_var_4 + 338], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_11:cse_var_11 + 8] = out_1[cse_var_11:cse_var_11 + 8] + T.Broadcast(A_1[cse_var_4 + 386], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_12:cse_var_12 + 8] = out_1[cse_var_12:cse_var_12 + 8] + T.Broadcast(A_1[cse_var_4 + 432], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_14:cse_var_14 + 8] = out_1[cse_var_14:cse_var_14 + 8] + T.Broadcast(A_1[cse_var_4 + 480], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_15:cse_var_15 + 8] = out_1[cse_var_15:cse_var_15 + 8] + T.Broadcast(A_1[cse_var_4 + 528], 8) * B_1[cse_var_5:cse_var_5 + 8]
                out_1[cse_var_12:cse_var_12 + 8] = out_1[cse_var_12:cse_var_12 + 8] + T.Broadcast(A_1[cse_var_4 + 433], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_14:cse_var_14 + 8] = out_1[cse_var_14:cse_var_14 + 8] + T.Broadcast(A_1[cse_var_4 + 481], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_15:cse_var_15 + 8] = out_1[cse_var_15:cse_var_15 + 8] + T.Broadcast(A_1[cse_var_4 + 529], 8) * B_1[cse_var_2:cse_var_2 + 8]
                out_1[cse_var_12:cse_var_12 + 8] = out_1[cse_var_12:cse_var_12 + 8] + T.Broadcast(A_1[cse_var_4 + 434], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_14:cse_var_14 + 8] = out_1[cse_var_14:cse_var_14 + 8] + T.Broadcast(A_1[cse_var_4 + 482], 8) * B_1[cse_var_3:cse_var_3 + 8]
                out_1[cse_var_15:cse_var_15 + 8] = out_1[cse_var_15:cse_var_15 + 8] + T.Broadcast(A_1[cse_var_4 + 530], 8) * B_1[cse_var_3:cse_var_3 + 8]
Execution time of this operator: max:1.265 us   median:1.246 us   min:1.188 us
Equivalent python schedule:
out_i, out_j, out_k = tuple(out.op.axis) + tuple(out.op.reduce_axis)
out_i_o_i, out_i_i = s[out].split(out_i, factor=3)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=4)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=1)
out_j_o_i, out_j_i = s[out].split(out_j, factor=8)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=1)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=1)
out_k_o, out_k_i = s[out].split(out_k, factor=3)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_k_o, out_i_o_i, out_j_o_i, out_k_i, out_i_i, out_j_i)
out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i)
s[out].parallel(out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused)
s[out].pragma(out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused, "auto_unroll_max_step", 512)
s[out].pragma(out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused, "unroll_explicit", True)
s[out].vectorize(out_j_i)


----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 3
Sample Initial Population	#s: 1884	fail_ct: 58	Time elapsed: 1.06
GA Iter: 0	Max score: 1.0000	Min score: 0.9245	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0000	Min score: 0.9862	#Pop: 128	#M+: 1380	#M-: 71
EvolutionarySearch		#s: 128	Time elapsed: 4.64
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
Get 64 programs to measure:
................****************Computational DAG:
A = PLACEHOLDER [32, 32]
B = PLACEHOLDER [32, 32]
out(i, j) += (A[i, k]*B[k, j])


==================================================
No: 1	GFLOPS: 16.92 / 16.92	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.22, Tstamp:1696907988.28)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 64
  for i_c.1 (0,16)
    for j_c.1 (0,4)
      for k.0 (0,8)
        for k.1 (0,4)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.1 (0,16)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 2	GFLOPS: 22.43 / 22.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.47, Tstamp:1696907988.57)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  out.local auto_unroll: 16
  for i_c.1 (0,2)
    for k.0 (0,32)
      for j_c.2 (0,16)
        for i_c.3 (0,8)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.1 (0,16)
    for j.1 (0,32)
      out = ...

==================================================
No: 3	GFLOPS: 36.26 / 36.26	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696907988.83)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  for j_c.2 (0,2)
    for k.1 (0,32)
      for i_c.3 (0,32)
        vectorize j_c.3 (0,4)
          out.local = ...
  for i.1 (0,32)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 4	GFLOPS: 58.12 / 58.12	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.40, Tstamp:1696907989.16)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,2)
  out.local auto_unroll: 64
  for k.0 (0,16)
    for i_c.2 (0,32)
      for j_c.2 (0,2)
        for k.1 (0,2)
          vectorize j_c.3 (0,8)
            out.local = ...
  for i.2 (0,32)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 5	GFLOPS: 22.69 / 58.12	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.79, Tstamp:1696907989.44)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,16)
  out.local auto_unroll: 512
  for j_c.1 (0,8)
    for i_c.2 (0,2)
      for k.1 (0,32)
        for i_c.3 (0,4)
          out.local = ...
  for i.1 (0,8)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 6	GFLOPS: 3.26 / 58.12	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696907989.61)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 64
  for i_c.1 (0,8)
    for j_c.1 (0,4)
      for k.0 (0,16)
        for k.1 (0,2)
          for i_c.3 (0,4)
            out.local = ...
  for i.1 (0,32)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 7	GFLOPS: 29.12 / 58.12	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.07, Tstamp:1696907989.79)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,16)
  out.local auto_unroll: 512
  for i_c.1 (0,8)
    for k.0 (0,8)
      for j_c.2 (0,4)
        for k.1 (0,4)
          for i_c.3 (0,2)
            out.local = ...
  for i.1 (0,16)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 8	GFLOPS: 22.09 / 58.12	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696907990.06)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,64)
  for k.0 (0,16)
    for j.2 (0,8)
      for k.1 (0,2)
        vectorize j.3 (0,2)
          out = ...

==================================================
No: 9	GFLOPS: 8.22 / 58.12	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696907990.35)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@ (0,128)
  for i.2 (0,8)
    for k.1 (0,32)
      out = ...

==================================================
No: 10	GFLOPS: 35.91 / ................****************
58.12	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696907990.63)
==================================================
Placeholder: A, B
out auto_unroll: 64
for j.2 (0,8)
  for k.1 (0,32)
    for i.3 (0,32)
      vectorize j.3 (0,4)
        out = ...

==================================================
No: 11	GFLOPS: 10.98 / 58.12	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.29, Tstamp:1696907990.88)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,256)
  out.local auto_unroll: 16
  for i_c.2 (0,2)
    for k.1 (0,32)
      vectorize j_c.3 (0,2)
        out.local = ...
  for i.2 (0,2)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 12	GFLOPS: 49.71 / 58.12	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.64, Tstamp:1696907991.22)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  out.local auto_unroll: 512
  for k.0 (0,8)
    for j_c.2 (0,16)
      for k.1 (0,4)
        for i_c.3 (0,4)
          out.local = ...
  for i.2 (0,4)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 13	GFLOPS: 50.74 / 58.12	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.46, Tstamp:1696907991.57)
==================================================
Placeholder: A, B
parallel i.0@ (0,4)
  for j.0 (0,2)
    out.local auto_unroll: 64
    for k.0 (0,4)
      for i_c.2 (0,2)
        for j_c.2 (0,4)
          for k.1 (0,8)
            for i_c.3 (0,4)
              vectorize j_c.3 (0,4)
                out.local = ...
    for i.1 (0,8)
      vectorize j.1 (0,16)
        out = ...

==================================================
No: 14	GFLOPS: 67.15 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.28, Tstamp:1696907991.78)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  for k.0 (0,4)
    for j_c.2 (0,32)
      for k.1 (0,8)
        for i_c.3 (0,2)
          out.local = ...
  for i.2 (0,2)
    vectorize j.2 (0,32)
      out = ...

==================================================
No: 15	GFLOPS: 62.68 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.53, Tstamp:1696907992.13)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,4)
  out.local auto_unroll: 64
  for k.0 (0,4)
    for i_c.2 (0,8)
      for k.1 (0,8)
        for j_c.3 (0,32)
          out.local = ...
  for i.2 (0,8)
    for j.2 (0,32)
      out = ...

==================================================
No: 16	GFLOPS: 9.65 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.20, Tstamp:1696907992.27)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,32)
  for j.2 (0,4)
    for k.1 (0,32)
      for i.3 (0,8)
        out = ...

==================================================
No: 17	GFLOPS: 1.93 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.21, Tstamp:1696907995.56)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,32)
  for k.0 (0,2)
    for j.2 (0,16)
      for k.1 (0,16)
        for i.3 (0,2)
          out = ...

==================================================
No: 18	GFLOPS: 16.51 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.23, Tstamp:1696907995.69)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  out.local auto_unroll: 64
  for i_c.1 (0,4)
    for j_c.1 (0,16)
      for k.0 (0,8)
        for k.1 (0,4)
          for i_c.3 (0,8)
            out.local = ...
  for i.1 (0,32)
    vectorize j.1 (0,16)
      out = ...

==================================================
No: 19	GFLOPS: 28.15 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.19, Tstamp:1696907995.82)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,32)
  for k.0 (0,32)
    for i.2 (0,2)
      for j.2 (0,2)
        for i.3 (0,4)
          vectorize j.3 (0,2)
            out = ...

==================================================
No: 20	GFLOPS: 10.97 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.20, Tstamp:1696907995.95)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,128)
  for i_c.2 (0,4)
    for j_c.2 (0,2)
      for k.1 (0,32)
        out.local = ...
  for i.2 (0,4)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 21	GFLOPS: 64.84 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.48, Tstamp:1696907996.29)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,4)
  for k.0 (0,16)
    for j.2 (0,4)
      for k.1 (0,2)
        for i.3 (0,8)
          vectorize j.3 (0,8)
            out = ...

==================================================
No: 22	GFLOPS: 36.66 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696907996.55)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for k.0 (0,8)
        for i_c.2 (0,2)
          for j_c.2 (0,4)
            for k.1 (0,4)
              for i_c.3 (0,2)
                vectorize j_c.3 (0,2)
                  out.local = ...
  for i.1 (0,8)
    vectorize j.1 (0,16)
      out = ...

==================================================
No: 23	GFLOPS: 41.25 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696907996.79)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,32)
  out.local auto_unroll: 64
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for k.0 (0,2)
        for j_c.2 (0,8)
          for k.1 (0,16)
            out.local = ...
  for i.1 (0,2)
    vectorize j.1 (0,16)
      out = ...

==================================================
No: 24	GFLOPS: 41.95 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.73, Tstamp:1696907997.13)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,2)
  for k.0 (0,8)
    for i.2 (0,8)
      for j.2 (0,8)
        for k.1 (0,4)
          for i.3 (0,2)
            vectorize j.3 (0,4)
              out = ...

==================================================
No: 25	GFLOPS: 14.25 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.22, Tstamp:1696907997.26)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  for k.0 (0,8)
    for i.2 (0,4)
      for j.2 (0,8)
        for k.1 (0,4)
          for i.3 (0,2)
            out = ...

==================================================
No: 26	GFLOPS: 21.23 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.46, Tstamp:1696907997.53)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,128)
  for k.0 (0,32)
    for i.2 (0,2)
      vectorize j.3 (0,4)
        out = ...

==================================================
No: 27	GFLOPS: 45.27 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.41, Tstamp:1696907997.78)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,32)
  for i.2 (0,2)
    for k.1 (0,32)
      for i.3 (0,2)
        vectorize j.3 (0,8)
          out = ...

==================================================
No: 28	GFLOPS: 37.21 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.30, Tstamp:1696907998.00)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,64)
  out.local auto_unroll: 16
  for k.0 (0,4)
    for i_c.2 (0,4)
      for k.1 (0,8)
        for i_c.3 (0,2)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.2 (0,8)
    vectorize j.2 (0,2)
      out = ...

====................****************
==============================================
No: 29	GFLOPS: 41.79 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696907998.27)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 16
  for i_c.1 (0,2)
    for j_c.1 (0,4)
      for k.1 (0,32)
        for i_c.3 (0,8)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.1 (0,16)
    vectorize j.1 (0,16)
      out = ...

==================================================
No: 30	GFLOPS: 38.17 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696907998.49)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,16)
  for k.0 (0,32)
    for j.2 (0,4)
      for i.3 (0,8)
        vectorize j.3 (0,2)
          out = ...

==================================================
No: 31	GFLOPS: 5.79 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.24, Tstamp:1696907998.62)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,8)
  for k.0 (0,2)
    for i.2 (0,2)
      for j.2 (0,4)
        for k.1 (0,16)
          for i.3 (0,16)
            out = ...

==================================================
No: 32	GFLOPS: 34.80 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696907998.89)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,32)
  for k.0 (0,4)
    for i_c.2 (0,16)
      for k.1 (0,8)
        vectorize j_c.3 (0,2)
          out.local = ...
  for i.2 (0,16)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 33	GFLOPS: 57.64 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696908001.33)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 64
  for i_c.1 (0,2)
    for j_c.2 (0,2)
      for k.1 (0,32)
        for i_c.3 (0,4)
          vectorize j_c.3 (0,8)
            out.local = ...
  for i.1 (0,8)
    vectorize j.1 (0,16)
      out = ...

==================================================
No: 34	GFLOPS: 43.32 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.51, Tstamp:1696908001.56)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,16)
  out.local auto_unroll: 512
  for j_c.1 (0,4)
    for k.0 (0,8)
      for i_c.2 (0,4)
        for k.1 (0,4)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.1 (0,4)
    vectorize j.1 (0,16)
      out = ...

==================================================
No: 35	GFLOPS: 39.28 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.30, Tstamp:1696908001.78)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,32)
  for k.0 (0,8)
    for j.2 (0,2)
      for k.1 (0,4)
        for i.3 (0,4)
          vectorize j.3 (0,4)
            out = ...

==================================================
No: 36	GFLOPS: 0.69 / 67.15	results: MeasureResult(cost:[0.0001], error_no:0, all_cost:0.19, Tstamp:1696908001.92)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,512)
  for k.0 (0,2)
    for k.1 (0,16)
      for i.3 (0,2)
        out = ...

==================================================
No: 37	GFLOPS: 47.37 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696908002.18)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  for i_c.2 (0,2)
    for j_c.2 (0,4)
      for k.1 (0,32)
        for i_c.3 (0,2)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.2 (0,4)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 38	GFLOPS: 34.04 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696908002.42)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,32)
  for k.0 (0,2)
    for i.2 (0,4)
      for k.1 (0,16)
        vectorize j.3 (0,8)
          out = ...

==================================================
No: 39	GFLOPS: 21.35 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.40, Tstamp:1696908002.69)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,8)
  out.local auto_unroll: 64
  for j_c.2 (0,4)
    for k.1 (0,32)
      for i_c.3 (0,32)
        out.local = ...
  for i.2 (0,32)
    vectorize j.2 (0,4)
      out = ...

==================================================
No: 40	GFLOPS: 16.93 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.44, Tstamp:1696908002.98)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,64)
  out.local auto_unroll: 512
  for i_c.1 (0,8)
    for k.0 (0,2)
      for j_c.2 (0,2)
        for k.1 (0,16)
          out.local = ...
  for i.1 (0,8)
    vectorize j.1 (0,2)
      out = ...

==================================================
No: 41	GFLOPS: 35.54 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.30, Tstamp:1696908003.21)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,32)
  out.local auto_unroll: 64
  for k.0 (0,16)
    for j_c.2 (0,8)
      for k.1 (0,2)
        for i_c.3 (0,2)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.2 (0,2)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 42	GFLOPS: 32.66 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.59, Tstamp:1696908003.49)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,128)
  for k.0 (0,2)
    for j.2 (0,4)
      for k.1 (0,16)
        vectorize j.3 (0,2)
          out = ...

==================================================
No: 43	GFLOPS: 8.97 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696908003.77)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,512)
  out.local auto_unroll: 16
  for k.0 (0,4)
    for i_c.2 (0,2)
      for k.1 (0,8)
        out.local = ...
  for i.2 (0,2)
    out = ...

==================================================
No: 44	GFLOPS: 13.76 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.51, Tstamp:1696908004.05)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,256)
  out.local auto_unroll: 512
  for k.0 (0,8)
    for j_c.2 (0,4)
      for k.1 (0,4)
        out.local = ...
  vectorize j.2 (0,4)
    out = ...

==================================================
No: 45	GFLOPS: 38.04 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.44, Tstamp:1696908004.34)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 64
  for j_c.1 (0,8)
    for k.0 (0,32)
      for i_c.2 (0,8)
        for j_c.2 (0,4)
          out.local = ...
  for i.1 (0,8)
    for j.1 (0,32)
      out = ...

==================================================
No: 46	GFLOPS: 35.61 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696908004.60)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  out.local auto_unroll: 64
  for i_c.2 (0,16)
    for k.1 (0,32)
      vectorize j_c.3 (0,4)
        out.local = ...
  for i.2 (0,16)
    vectorize j.2 (0,4)
      out = ...

==================================================
No: 47	GFLOPS: 17.66 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.20, Tstamp:1696908004.74)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  for i_c.2 (0,8)
    for k.1 (0,32)
      for i_c.3 (0,4)
        vectorize j_c.3 (0,2)
          out.local = ...
  for i.2 (0,3................****************
2)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 48	GFLOPS: 60.34 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.30, Tstamp:1696908004.95)
==================================================
Placeholder: A, B
out auto_unroll: 64
for k.0 (0,32)
  for i.2 (0,32)
    for j.3 (0,32)
      out = ...

==================================================
No: 49	GFLOPS: 28.01 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696908009.03)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,64)
  out.local auto_unroll: 16
  for i_c.1 (0,4)
    for j_c.2 (0,4)
      for k.1 (0,32)
        out.local = ...
  for i.1 (0,4)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 50	GFLOPS: 11.74 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.44, Tstamp:1696908009.33)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,256)
  out.local auto_unroll: 512
  for j_c.1 (0,2)
    for k.0 (0,32)
      vectorize j_c.3 (0,2)
        out.local = ...
  vectorize j.1 (0,4)
    out = ...

==================================================
No: 51	GFLOPS: 50.61 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.64, Tstamp:1696908009.67)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,2)
  for k.0 (0,32)
    for i.2 (0,8)
      for j.2 (0,32)
        for i.3 (0,2)
          out = ...

==================================================
No: 52	GFLOPS: 3.76 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.29, Tstamp:1696908009.82)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for i_c.2 (0,16)
        for j_c.2 (0,4)
          for k.1 (0,32)
            vectorize j_c.3 (0,2)
              out.local = ...
  for i.1 (0,32)
    vectorize j.1 (0,16)
      out = ...

==================================================
No: 53	GFLOPS: 30.20 / 67.15	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696908010.10)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,256)
  for k.0 (0,32)
    for j.2 (0,2)
      vectorize j.3 (0,2)
        out = ...

==================================================
No: 54	GFLOPS: 70.43 / 70.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.26, Tstamp:1696908010.29)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,32)
  for k.0 (0,4)
    for j.2 (0,32)
      for k.1 (0,8)
        out = ...

==================================================
No: 55	GFLOPS: 52.63 / 70.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.43, Tstamp:1696908010.64)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  out.local auto_unroll: 16
  for k.0 (0,2)
    for i_c.2 (0,4)
      for j_c.2 (0,2)
        for k.1 (0,16)
          vectorize j_c.3 (0,8)
            out.local = ...
  for i.2 (0,4)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 56	GFLOPS: 27.21 / 70.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:2.35, Tstamp:1696908010.92)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 512
  for i_c.1 (0,4)
    for k.0 (0,2)
      for i_c.2 (0,2)
        for j_c.2 (0,4)
          for k.1 (0,16)
            for i_c.3 (0,2)
              vectorize j_c.3 (0,2)
                out.local = ...
  for i.1 (0,16)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 57	GFLOPS: 9.81 / 70.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696908011.20)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,2)
  for k.0 (0,16)
    for k.1 (0,2)
      for i.3 (0,32)
        vectorize j.3 (0,16)
          out = ...

==================================================
No: 58	GFLOPS: 9.49 / 70.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:2.03, Tstamp:1696908011.46)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,32)
  for k.0 (0,2)
    for i.2 (0,4)
      for j.2 (0,4)
        for k.1 (0,16)
          for i.3 (0,2)
            out = ...

==================================================
No: 59	GFLOPS: 20.09 / 70.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.22, Tstamp:1696908011.59)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,128)
  out.local auto_unroll: 64
  for i_c.1 (0,2)
    for j_c.1 (0,4)
      for k.0 (0,4)
        for k.1 (0,8)
          out.local = ...
  for i.1 (0,2)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 60	GFLOPS: 0.87 / 70.43	results: MeasureResult(cost:[0.0001], error_no:0, all_cost:0.21, Tstamp:1696908011.72)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,32)
  for k.0 (0,16)
    for i.2 (0,32)
      for k.1 (0,2)
        out = ...

==================================================
No: 61	GFLOPS: 35.85 / 70.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.28, Tstamp:1696908011.95)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,64)
  out.local auto_unroll: 64
  for k.0 (0,32)
    for i_c.2 (0,4)
      for j_c.2 (0,2)
        vectorize j_c.3 (0,2)
          out.local = ...
  for i.2 (0,4)
    vectorize j.2 (0,4)
      out = ...

==================================================
No: 62	GFLOPS: 36.74 / 70.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696908012.21)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,32)
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for k.0 (0,8)
        for j_c.2 (0,2)
          for k.1 (0,4)
            for i_c.3 (0,2)
              vectorize j_c.3 (0,2)
                out.local = ...
  for i.1 (0,4)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 63	GFLOPS: 62.18 / 70.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.56, Tstamp:1696908012.55)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 64
  for j_c.1 (0,2)
    for k.0 (0,8)
      for j_c.2 (0,2)
        for k.1 (0,4)
          for i_c.3 (0,8)
            vectorize j_c.3 (0,8)
              out.local = ...
  for i.1 (0,8)
    for j.1 (0,32)
      out = ...

==================================================
No: 64	GFLOPS: 24.35 / 70.43	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.31, Tstamp:1696908012.81)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,128)
  for k.0 (0,8)
    for j_c.2 (0,4)
      for k.1 (0,4)
        vectorize j_c.3 (0,2)
          out.local = ...
  vectorize j.2 (0,8)
    out = ...

Time elapsed for measurement: 27.31 s
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.15 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 1906	fail_ct: 49	Time elapsed: 1.06
GA Iter: 0	Max score: 0.9999	Min score: 0.9326	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9999	Min score: 0.9889	#Pop: 128	#M+: 1376	#M-: 71
EvolutionarySearch		#s: 128	Time elapsed: 4.71
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
Get 36 programs to measure:
................****************
==================================================
No: 65	GFLOPS: 71.69 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:2.01, Tstamp:1696908024.23)
==================================================
Placeholder: A, B
out auto_unroll: 512
for k.0 (0,4)
  for i.2 (0,16)
    for j.2 (0,2)
      for k.1 (0,8)
        for i.3 (0,2)
          vectorize j.3 (0,16)
            out = ...

==================================================
No: 66	GFLOPS: 9.31 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696908024.50)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,256)
  for k.0 (0,32)
    vectorize j_c.3 (0,4)
      out.local = ...
  vectorize j.2 (0,4)
    out = ...

==================================================
No: 67	GFLOPS: 41.84 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696908024.78)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,128)
  for k.0 (0,4)
    for k.1 (0,8)
      for i.3 (0,4)
        vectorize j.3 (0,2)
          out = ...

==================================================
No: 68	GFLOPS: 41.22 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696908025.06)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,8)
  out.local auto_unroll: 16
  for k.0 (0,16)
    for i_c.2 (0,16)
      for j_c.2 (0,4)
        for k.1 (0,2)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.2 (0,16)
    vectorize j.2 (0,8)
      out = ...

==================================================
No: 69	GFLOPS: 26.56 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696908025.35)
==================================================
Placeholder: A, B
parallel i.0@ (0,8)
  for j.0 (0,32)
    out.local auto_unroll: 64
    for k.0 (0,4)
      for i_c.2 (0,2)
        for k.1 (0,8)
          for i_c.3 (0,2)
            out.local = ...
    for i.1 (0,4)
      out = ...

==================================================
No: 70	GFLOPS: 15.47 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696908025.62)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,256)
  for k.1 (0,32)
    vectorize j_c.3 (0,4)
      out.local = ...
  vectorize j.2 (0,4)
    out = ...

==================================================
No: 71	GFLOPS: 36.17 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.29, Tstamp:1696908025.83)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,2)
  out.local auto_unroll: 16
  for i_c.2 (0,32)
    for j_c.2 (0,2)
      for k.1 (0,32)
        vectorize j_c.3 (0,8)
          out.local = ...
  for i.2 (0,32)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 72	GFLOPS: 1.62 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.39, Tstamp:1696908026.15)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,64)
  for k.0 (0,32)
    for i.2 (0,4)
      for j.2 (0,2)
        for i.3 (0,2)
          out = ...

==================================================
No: 73	GFLOPS: 43.21 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696908026.36)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,64)
  out.local auto_unroll: 64
  for k.1 (0,32)
    for i_c.3 (0,2)
      vectorize j_c.3 (0,8)
        out.local = ...
  for i.1 (0,2)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 74	GFLOPS: 43.52 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.45, Tstamp:1696908026.70)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,2)
  out.local auto_unroll: 64
  for k.0 (0,8)
    for i_c.2 (0,4)
      fo................****************
r j_c.2 (0,16)
        for k.1 (0,4)
          for i_c.3 (0,8)
            out.local = ...
  for i.2 (0,32)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 75	GFLOPS: 52.04 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.31, Tstamp:1696908026.94)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,32)
  for k.0 (0,8)
    for i_c.2 (0,2)
      for j_c.2 (0,4)
        for k.1 (0,4)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.2 (0,2)
    vectorize j.2 (0,16)
      out = ...

==================================================
No: 76	GFLOPS: 37.11 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.21, Tstamp:1696908027.22)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 512
  for i_c.1 (0,8)
    for j_c.2 (0,4)
      for k.1 (0,32)
        for i_c.3 (0,2)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.1 (0,16)
    vectorize j.1 (0,16)
      out = ...

==================================================
No: 77	GFLOPS: 38.80 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.38, Tstamp:1696908027.52)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  out.local auto_unroll: 64
  for k.0 (0,2)
    for i_c.2 (0,2)
      for j_c.2 (0,2)
        for k.1 (0,16)
          for i_c.3 (0,8)
            vectorize j_c.3 (0,2)
              out.local = ...
  for i.2 (0,16)
    vectorize j.2 (0,4)
      out = ...

==================================================
No: 78	GFLOPS: 20.31 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696908027.80)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,128)
  out.local auto_unroll: 16
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for k.0 (0,4)
        for k.1 (0,8)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.1 (0,2)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 79	GFLOPS: 1.31 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:3.64, Tstamp:1696908028.07)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,16)
  for i.2 (0,4)
    for j.2 (0,2)
      for k.1 (0,32)
        for i.3 (0,8)
          out = ...

==================================================
No: 80	GFLOPS: 52.71 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.65, Tstamp:1696908028.42)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 512
  for i_c.1 (0,4)
    for j_c.1 (0,2)
      for k.0 (0,2)
        for k.1 (0,16)
          for i_c.3 (0,2)
            vectorize j_c.3 (0,16)
              out.local = ...
  for i.1 (0,8)
    for j.1 (0,32)
      out = ...

==================================================
No: 81	GFLOPS: 31.22 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696908030.76)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,32)
  out.local auto_unroll: 16
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for k.0 (0,16)
        for i_c.2 (0,4)
          for k.1 (0,2)
            vectorize j_c.3 (0,2)
              out.local = ...
  for i.1 (0,8)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 82	GFLOPS: 18.41 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696908031.03)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,64)
  for k.0 (0,8)
    for i.2 (0,2)
      for j.2 (0,2)
        for k.1 (0,4)
          for i.3 (0,4)
            out = ...

==================================================
No: 83	GFLOPS: 18.88 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.23, Tstamp:1696908031.17)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,4)
  for k.0 (0,4)
    for i.2 (0,32)
      for j.2 (0,4)
        for k.1 (0,8)
          vectorize j.3 (0,2)
            out = ...

==================================================
No: 84	GFLOPS: 22.49 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.43, Tstamp:1696908031.46)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,16)
  out.local auto_unroll: 512
  for i_c.1 (0,2)
    for j_c.1 (0,16)
      for k.0 (0,32)
        vectorize j_c.3 (0,2)
          out.local = ...
  for i.1 (0,2)
    for j.1 (0,32)
      out = ...

==================================================
No: 85	GFLOPS: 30.19 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696908031.71)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,64)
  out.local auto_unroll: 16
  for k.0 (0,16)
    for i_c.2 (0,2)
      for k.1 (0,2)
        for i_c.3 (0,4)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.2 (0,8)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 86	GFLOPS: 26.14 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.19, Tstamp:1696908031.85)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 16
  for j_c.1 (0,32)
    for k.0 (0,32)
      for i_c.3 (0,8)
        out.local = ...
  for i.1 (0,8)
    vectorize j.1 (0,32)
      out = ...

==================================================
No: 87	GFLOPS: 22.49 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696908032.12)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,64)
  for k.0 (0,2)
    for i.2 (0,2)
      for j.2 (0,2)
        for k.1 (0,16)
          for i.3 (0,4)
            out = ...

==================================================
No: 88	GFLOPS: 1.21 / 71.69	results: MeasureResult(cost:[0.0001], error_no:0, all_cost:0.21, Tstamp:1696908032.26)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,512)
  for k.0 (0,8)
    for k.1 (0,4)
      vectorize j.3 (0,2)
        out = ...

==================================================
No: 89	GFLOPS: 32.87 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696908032.54)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 16
  for j_c.1 (0,2)
    for k.0 (0,2)
      for i_c.2 (0,2)
        for j_c.2 (0,4)
          for k.1 (0,16)
            for i_c.3 (0,4)
              vectorize j_c.3 (0,2)
                out.local = ...
  for i.1 (0,8)
    vectorize j.1 (0,16)
      out = ...

==================================================
No: 90	GFLOPS: 30.63 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.29, Tstamp:1696908032.75)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,64)
  for k.0 (0,16)
    for i.2 (0,4)
      for j.2 (0,4)
        for k.1 (0,2)
          out = ...

==================================================
No: 91	GFLOPS: 15.22 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696908033.04)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,256)
  for j.1 (0,4)
    out.local auto_unroll: 64
    for k.1 (0,32)
      out.local = ...
    out = ...

==================================================
No: 92	GFLOPS: 27.54 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696908033.32)
==================================================
Placeholder: A, B
parallel i.0@ (0,8)
  for j.0 (0,8)
    out.local auto_unroll: 16
    for i_c.1 (0,4)
      for k.0 (0,4)
        for j_c.2 (0,4)
          for k.1 (0,8)
      ....****
      out.local = ...
    for i.1 (0,4)
      vectorize j.1 (0,4)
        out = ...

==================================================
No: 93	GFLOPS: 41.60 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696908033.55)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,32)
  out.local auto_unroll: 512
  for k.0 (0,32)
    for j_c.2 (0,4)
      vectorize j_c.3 (0,8)
        out.local = ...
  for j.2 (0,32)
    out = ...

==================================================
No: 94	GFLOPS: 7.44 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.20, Tstamp:1696908033.68)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,512)
  out.local auto_unroll: 16
  for k.0 (0,8)
    for i_c.2 (0,2)
      for k.1 (0,4)
        out.local = ...
  for i.2 (0,2)
    out = ...

==================================================
No: 95	GFLOPS: 29.19 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696908033.91)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,2)
  out.local auto_unroll: 64
  for k.0 (0,8)
    for i_c.2 (0,16)
      for j_c.2 (0,16)
        for k.1 (0,4)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.2 (0,16)
    vectorize j.2 (0,32)
      out = ...

==================================================
No: 96	GFLOPS: 27.15 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.21, Tstamp:1696908034.04)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,16)
  out.local auto_unroll: 16
  for i_c.1 (0,16)
    for j_c.1 (0,2)
      for k.0 (0,2)
        for k.1 (0,16)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.1 (0,16)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 97	GFLOPS: 14.95 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696908038.59)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  for i_c.1 (0,16)
    for j_c.1 (0,4)
      for k.0 (0,16)
        for i_c.2 (0,2)
          for k.1 (0,2)
            vectorize j_c.3 (0,2)
              out.local = ...
  for i.1 (0,32)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 98	GFLOPS: 24.66 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.01, Tstamp:1696908038.72)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@ (0,128)
  for k.0 (0,8)
    for j.2 (0,4)
      for k.1 (0,4)
        for i.3 (0,2)
          out = ...

==================================================
No: 99	GFLOPS: 32.08 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696908039.00)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,64)
  for k.0 (0,32)
    for j.2 (0,4)
      for i.3 (0,4)
        out = ...

==================================================
No: 100	GFLOPS: 11.52 / 71.69	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:3.17, Tstamp:1696908039.29)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,64)
  for k.0 (0,4)
    for j.2 (0,2)
      for k.1 (0,8)
        for i.3 (0,8)
          out = ...

Time elapsed for measurement: 20.53 s
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((32, 32), "float32"), B: T.Buffer((32, 32), "float32"), out: T.Buffer((32, 32), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        out_1 = T.Buffer((1024,), data=out.data)
        out_1[0:16] = T.Broadcast(T.float32(0), 16)
        out_1[32:48] = T.Broadcast(T.float32(0), 16)
        out_1[16:32] = T.Broadcast(T.float32(0), 16)
        out_1[48:64] = T.Broadcast(T.float32(0), 16)
        out_1[64:80] = T.Broadcast(T.float32(0), 16)
        out_1[96:112] = T.Broadcast(T.float32(0), 16)
        out_1[80:96] = T.Broadcast(T.float32(0), 16)
        out_1[112:128] = T.Broadcast(T.float32(0), 16)
        out_1[128:144] = T.Broadcast(T.float32(0), 16)
        out_1[160:176] = T.Broadcast(T.float32(0), 16)
        out_1[144:160] = T.Broadcast(T.float32(0), 16)
        out_1[176:192] = T.Broadcast(T.float32(0), 16)
        out_1[192:208] = T.Broadcast(T.float32(0), 16)
        out_1[224:240] = T.Broadcast(T.float32(0), 16)
        out_1[208:224] = T.Broadcast(T.float32(0), 16)
        out_1[240:256] = T.Broadcast(T.float32(0), 16)
        out_1[256:272] = T.Broadcast(T.float32(0), 16)
        out_1[288:304] = T.Broadcast(T.float32(0), 16)
        out_1[272:288] = T.Broadcast(T.float32(0), 16)
        out_1[304:320] = T.Broadcast(T.float32(0), 16)
        out_1[320:336] = T.Broadcast(T.float32(0), 16)
        out_1[352:368] = T.Broadcast(T.float32(0), 16)
        out_1[336:352] = T.Broadcast(T.float32(0), 16)
        out_1[368:384] = T.Broadcast(T.float32(0), 16)
        out_1[384:400] = T.Broadcast(T.float32(0), 16)
        out_1[416:432] = T.Broadcast(T.float32(0), 16)
        out_1[400:416] = T.Broadcast(T.float32(0), 16)
        out_1[432:448] = T.Broadcast(T.float32(0), 16)
        out_1[448:464] = T.Broadcast(T.float32(0), 16)
        out_1[480:496] = T.Broadcast(T.float32(0), 16)
        out_1[464:480] = T.Broadcast(T.float32(0), 16)
        out_1[496:512] = T.Broadcast(T.float32(0), 16)
        out_1[512:528] = T.Broadcast(T.float32(0), 16)
        out_1[544:560] = T.Broadcast(T.float32(0), 16)
        out_1[528:544] = T.Broadcast(T.float32(0), 16)
        out_1[560:576] = T.Broadcast(T.float32(0), 16)
        out_1[576:592] = T.Broadcast(T.float32(0), 16)
        out_1[608:624] = T.Broadcast(T.float32(0), 16)
        out_1[592:608] = T.Broadcast(T.float32(0), 16)
        out_1[624:640] = T.Broadcast(T.float32(0), 16)
        out_1[640:656] = T.Broadcast(T.float32(0), 16)
        out_1[672:688] = T.Broadcast(T.float32(0), 16)
        out_1[656:672] = T.Broadcast(T.float32(0), 16)
        out_1[688:704] = T.Broadcast(T.float32(0), 16)
        out_1[704:720] = T.Broadcast(T.float32(0), 16)
        out_1[736:752] = T.Broadcast(T.float32(0), 16)
        out_1[720:736] = T.Broadcast(T.float32(0), 16)
        out_1[752:768] = T.Broadcast(T.float32(0), 16)
        out_1[768:784] = T.Broadcast(T.float32(0), 16)
        out_1[800:816] = T.Broadcast(T.float32(0), 16)
        out_1[784:800] = T.Broadcast(T.float32(0), 16)
        out_1[816:832] = T.Broadcast(T.float32(0), 16)
        out_1[832:848] = T.Broadcast(T.float32(0), 16)
        out_1[864:880] = T.Broadcast(T.float32(0), 16)
        out_1[848:864] = T.Broadcast(T.float32(0), 16)
        out_1[880:896] = T.Broadcast(T.float32(0), 16)
        out_1[896:912] = T.Broadcast(T.float32(0), 16)
        out_1[928:944] = T.Broadcast(T.float32(0), 16)
        out_1[912:928] = T.Broadcast(T.float32(0), 16)
        out_1[944:960] = T.Broadcast(T.float32(0), 16)
        out_1[960:976] = T.Broadcast(T.float32(0), 16)
        out_1[992:1008] = T.Broadcast(T.float32(0), 16)
        out_1[976:992] = T.Broadcast(T.float32(0), 16)
        out_1[1008:1024] = T.Broadcast(T.float32(0), 16)
        for k_outer in range(4):
            cse_var_272: T.int32 = k_outer * 8
            cse_var_271: T.int32 = k_outer * 256
            cse_var_270: T.int32 = cse_var_272 + 999
            cse_var_269: T.int32 = cse_var_272 + 998
            cse_var_268: T.int32 = cse_var_272 + 997
            cse_var_267: T.int32 = cse_var_272 + 996
            cse_var_266: T.int32 = cse_var_272 + 995
            cse_var_265: T.int32 = cse_var_272 + 994
            cse_var_264: T.int32 = cse_var_272 + 993
            cse_var_263: T.int32 = cse_var_272 + 992
            cse_var_262: T.int32 = cse_var_272 + 99
            cse_var_261: T.int32 = cse_var_272 + 98
            cse_var_260: T.int32 = cse_var_272 + 97
            cse_var_259: T.int32 = cse_var_272 + 967
            cse_var_258: T.int32 = cse_var_272 + 966
            cse_var_257: T.int32 = cse_var_272 + 965
            cse_var_256: T.int32 = cse_var_272 + 964
            cse_var_255: T.int32 = cse_var_272 + 963
            cse_var_254: T.int32 = cse_var_272 + 962
            cse_var_253: T.int32 = cse_var_272 + 961
            cse_var_252: T.int32 = cse_var_272 + 960
            cse_var_251: T.int32 = cse_var_272 + 96
            cse_var_250: T.int32 = cse_var_272 + 935
            cse_var_249: T.int32 = cse_var_272 + 934
            cse_var_248: T.int32 = cse_var_272 + 933
            cse_var_247: T.int32 = cse_var_272 + 932
            cse_var_246: T.int32 = cse_var_272 + 931
            cse_var_245: T.int32 = cse_var_272 + 930
            cse_var_244: T.int32 = cse_var_272 + 929
            cse_var_243: T.int32 = cse_var_272 + 928
            cse_var_242: T.int32 = cse_var_272 + 903
            cse_var_241: T.int32 = cse_var_272 + 902
            cse_var_240: T.int32 = cse_var_272 + 901
            cse_var_239: T.int32 = cse_var_272 + 900
            cse_var_238: T.int32 = cse_var_272 + 899
            cse_var_237: T.int32 = cse_var_272 + 898
            cse_var_236: T.int32 = cse_var_272 + 897
            cse_var_235: T.int32 = cse_var_272 + 896
            cse_var_234: T.int32 = cse_var_272 + 871
            cse_var_233: T.int32 = cse_var_272 + 870
            cse_var_232: T.int32 = cse_var_272 + 869
            cse_var_231: T.int32 = cse_var_272 + 868
            cse_var_230: T.int32 = cse_var_272 + 867
            cse_var_229: T.int32 = cse_var_272 + 866
            cse_var_228: T.int32 = cse_var_272 + 865
            cse_var_227: T.int32 = cse_var_272 + 864
            cse_var_226: T.int32 = cse_var_272 + 839
            cse_var_225: T.int32 = cse_var_272 + 838
            cse_var_224: T.int32 = cse_var_272 + 837
            cse_var_223: T.int32 = cse_var_272 + 836
            cse_var_222: T.int32 = cse_var_272 + 835
            cse_var_221: T.int32 = cse_var_272 + 834
            cse_var_220: T.int32 = cse_var_272 + 833
            cse_var_219: T.int32 = cse_var_272 + 832
            cse_var_218: T.int32 = cse_var_272 + 807
            cse_var_217: T.int32 = cse_var_272 + 806
            cse_var_216: T.int32 = cse_var_272 + 805
            cse_var_215: T.int32 = cse_var_272 + 804
            cse_var_214: T.int32 = cse_var_272 + 803
            cse_var_213: T.int32 = cse_var_272 + 802
            cse_var_212: T.int32 = cse_var_272 + 801
            cse_var_211: T.int32 = cse_var_272 + 800
            cse_var_210: T.int32 = cse_var_272 + 775
            cse_var_209: T.int32 = cse_var_272 + 774
            cse_var_208: T.int32 = cse_var_272 + 773
            cse_var_207: T.int32 = cse_var_272 + 772
            cse_var_206: T.int32 = cse_var_272 + 771
            cse_var_205: T.int32 = cse_var_272 + 770
            cse_var_204: T.int32 = cse_var_272 + 769
            cse_var_203: T.int32 = cse_var_272 + 768
            cse_var_202: T.int32 = cse_var_272 + 743
            cse_var_201: T.int32 = cse_var_272 + 742
            cse_var_200: T.int32 = cse_var_272 + 741
            cse_var_199: T.int32 = cse_var_272 + 740
            cse_var_198: T.int32 = cse_var_272 + 739
            cse_var_197: T.int32 = cse_var_272 + 738
            cse_var_196: T.int32 = cse_var_272 + 737
            cse_var_195: T.int32 = cse_var_272 + 736
            cse_var_194: T.int32 = cse_var_272 + 711
            cse_var_193: T.int32 = cse_var_272 + 710
            cse_var_192: T.int32 = cse_var_272 + 71
            cse_var_191: T.int32 = cse_var_272 + 709
            cse_var_190: T.int32 = cse_var_272 + 708
            cse_var_189: T.int32 = cse_var_272 + 707
            cse_var_188: T.int32 = cse_var_272 + 706
            cse_var_187: T.int32 = cse_var_272 + 705
            cse_var_186: T.int32 = cse_var_272 + 704
            cse_var_185: T.int32 = cse_var_272 + 70
            cse_var_184: T.int32 = cse_var_272 + 7
            cse_var_183: T.int32 = cse_var_272 + 69
            cse_var_182: T.int32 = cse_var_272 + 68
            cse_var_181: T.int32 = cse_var_272 + 679
            cse_var_180: T.int32 = cse_var_272 + 678
            cse_var_179: T.int32 = cse_var_272 + 677
            cse_var_178: T.int32 = cse_var_272 + 676
            cse_var_177: T.int32 = cse_var_272 + 675
            cse_var_176: T.int32 = cse_var_272 + 674
            cse_var_175: T.int32 = cse_var_272 + 673
            cse_var_174: T.int32 = cse_var_272 + 672
            cse_var_173: T.int32 = cse_var_272 + 67
            cse_var_172: T.int32 = cse_var_272 + 66
            cse_var_171: T.int32 = cse_var_272 + 65
            cse_var_170: T.int32 = cse_var_272 + 647
            cse_var_169: T.int32 = cse_var_272 + 646
            cse_var_168: T.int32 = cse_var_272 + 645
            cse_var_167: T.int32 = cse_var_272 + 644
            cse_var_166: T.int32 = cse_var_272 + 643
            cse_var_165: T.int32 = cse_var_272 + 642
            cse_var_164: T.int32 = cse_var_272 + 641
            cse_var_163: T.int32 = cse_var_272 + 640
            cse_var_162: T.int32 = cse_var_272 + 64
            cse_var_161: T.int32 = cse_var_272 + 615
            cse_var_160: T.int32 = cse_var_272 + 614
            cse_var_159: T.int32 = cse_var_272 + 613
            cse_var_158: T.int32 = cse_var_272 + 612
            cse_var_157: T.int32 = cse_var_272 + 611
            cse_var_156: T.int32 = cse_var_272 + 610
            cse_var_155: T.int32 = cse_var_272 + 609
            cse_var_154: T.int32 = cse_var_272 + 608
            cse_var_153: T.int32 = cse_var_272 + 6
            cse_var_152: T.int32 = cse_var_272 + 583
            cse_var_151: T.int32 = cse_var_272 + 582
            cse_var_150: T.int32 = cse_var_272 + 581
            cse_var_149: T.int32 = cse_var_272 + 580
            cse_var_148: T.int32 = cse_var_272 + 579
            cse_var_147: T.int32 = cse_var_272 + 578
            cse_var_146: T.int32 = cse_var_272 + 577
            cse_var_145: T.int32 = cse_var_272 + 576
            cse_var_144: T.int32 = cse_var_272 + 551
            cse_var_143: T.int32 = cse_var_272 + 550
            cse_var_142: T.int32 = cse_var_272 + 549
            cse_var_141: T.int32 = cse_var_272 + 548
            cse_var_140: T.int32 = cse_var_272 + 547
            cse_var_139: T.int32 = cse_var_272 + 546
            cse_var_138: T.int32 = cse_var_272 + 545
            cse_var_137: T.int32 = cse_var_272 + 544
            cse_var_136: T.int32 = cse_var_272 + 519
            cse_var_135: T.int32 = cse_var_272 + 518
            cse_var_134: T.int32 = cse_var_272 + 517
            cse_var_133: T.int32 = cse_var_272 + 516
            cse_var_132: T.int32 = cse_var_272 + 515
            cse_var_131: T.int32 = cse_var_272 + 514
            cse_var_130: T.int32 = cse_var_272 + 513
            cse_var_129: T.int32 = cse_var_272 + 512
            cse_var_128: T.int32 = cse_var_272 + 5
            cse_var_127: T.int32 = cse_var_272 + 487
            cse_var_126: T.int32 = cse_var_272 + 486
            cse_var_125: T.int32 = cse_var_272 + 485
            cse_var_124: T.int32 = cse_var_272 + 484
            cse_var_123: T.int32 = cse_var_272 + 483
            cse_var_122: T.int32 = cse_var_272 + 482
            cse_var_121: T.int32 = cse_var_272 + 481
            cse_var_120: T.int32 = cse_var_272 + 480
            cse_var_119: T.int32 = cse_var_272 + 455
            cse_var_118: T.int32 = cse_var_272 + 454
            cse_var_117: T.int32 = cse_var_272 + 453
            cse_var_116: T.int32 = cse_var_272 + 452
            cse_var_115: T.int32 = cse_var_272 + 451
            cse_var_114: T.int32 = cse_var_272 + 450
            cse_var_113: T.int32 = cse_var_272 + 449
            cse_var_112: T.int32 = cse_var_272 + 448
            cse_var_111: T.int32 = cse_var_272 + 423
            cse_var_110: T.int32 = cse_var_272 + 422
            cse_var_109: T.int32 = cse_var_272 + 421
            cse_var_108: T.int32 = cse_var_272 + 420
            cse_var_107: T.int32 = cse_var_272 + 419
            cse_var_106: T.int32 = cse_var_272 + 418
            cse_var_105: T.int32 = cse_var_272 + 417
            cse_var_104: T.int32 = cse_var_272 + 416
            cse_var_103: T.int32 = cse_var_272 + 4
            cse_var_102: T.int32 = cse_var_272 + 391
            cse_var_101: T.int32 = cse_var_272 + 390
            cse_var_100: T.int32 = cse_var_272 + 39
            cse_var_99: T.int32 = cse_var_272 + 389
            cse_var_98: T.int32 = cse_var_272 + 388
            cse_var_97: T.int32 = cse_var_272 + 387
            cse_var_96: T.int32 = cse_var_272 + 386
            cse_var_95: T.int32 = cse_var_272 + 385
            cse_var_94: T.int32 = cse_var_272 + 384
            cse_var_93: T.int32 = cse_var_272 + 38
            cse_var_92: T.int32 = cse_var_272 + 37
            cse_var_91: T.int32 = cse_var_272 + 36
            cse_var_90: T.int32 = cse_var_272 + 359
            cse_var_89: T.int32 = cse_var_272 + 358
            cse_var_88: T.int32 = cse_var_272 + 357
            cse_var_87: T.int32 = cse_var_272 + 356
            cse_var_86: T.int32 = cse_var_272 + 355
            cse_var_85: T.int32 = cse_var_272 + 354
            cse_var_84: T.int32 = cse_var_272 + 353
            cse_var_83: T.int32 = cse_var_272 + 352
            cse_var_82: T.int32 = cse_var_272 + 35
            cse_var_81: T.int32 = cse_var_272 + 34
            cse_var_80: T.int32 = cse_var_272 + 33
            cse_var_79: T.int32 = cse_var_272 + 327
            cse_var_78: T.int32 = cse_var_272 + 326
            cse_var_77: T.int32 = cse_var_272 + 325
            cse_var_76: T.int32 = cse_var_272 + 324
            cse_var_75: T.int32 = cse_var_272 + 323
            cse_var_74: T.int32 = cse_var_272 + 322
            cse_var_73: T.int32 = cse_var_272 + 321
            cse_var_72: T.int32 = cse_var_272 + 320
            cse_var_71: T.int32 = cse_var_272 + 32
            cse_var_70: T.int32 = cse_var_272 + 3
            cse_var_69: T.int32 = cse_var_272 + 295
            cse_var_68: T.int32 = cse_var_272 + 294
            cse_var_67: T.int32 = cse_var_272 + 293
            cse_var_66: T.int32 = cse_var_272 + 292
            cse_var_65: T.int32 = cse_var_272 + 291
            cse_var_64: T.int32 = cse_var_272 + 290
            cse_var_63: T.int32 = cse_var_272 + 289
            cse_var_62: T.int32 = cse_var_272 + 288
            cse_var_61: T.int32 = cse_var_272 + 263
            cse_var_60: T.int32 = cse_var_272 + 262
            cse_var_59: T.int32 = cse_var_272 + 261
            cse_var_58: T.int32 = cse_var_272 + 260
            cse_var_57: T.int32 = cse_var_272 + 259
            cse_var_56: T.int32 = cse_var_272 + 258
            cse_var_55: T.int32 = cse_var_272 + 257
            cse_var_54: T.int32 = cse_var_272 + 256
            cse_var_53: T.int32 = cse_var_272 + 231
            cse_var_52: T.int32 = cse_var_272 + 230
            cse_var_51: T.int32 = cse_var_272 + 229
            cse_var_50: T.int32 = cse_var_272 + 228
            cse_var_49: T.int32 = cse_var_272 + 227
            cse_var_48: T.int32 = cse_var_272 + 226
            cse_var_47: T.int32 = cse_var_272 + 225
            cse_var_46: T.int32 = cse_var_272 + 224
            cse_var_45: T.int32 = cse_var_272 + 2
            cse_var_44: T.int32 = cse_var_272 + 199
            cse_var_43: T.int32 = cse_var_272 + 198
            cse_var_42: T.int32 = cse_var_272 + 197
            cse_var_41: T.int32 = cse_var_272 + 196
            cse_var_40: T.int32 = cse_var_272 + 195
            cse_var_39: T.int32 = cse_var_272 + 194
            cse_var_38: T.int32 = cse_var_272 + 193
            cse_var_37: T.int32 = cse_var_272 + 192
            cse_var_36: T.int32 = cse_var_272 + 167
            cse_var_35: T.int32 = cse_var_272 + 166
            cse_var_34: T.int32 = cse_var_272 + 165
            cse_var_33: T.int32 = cse_var_272 + 164
            cse_var_32: T.int32 = cse_var_272 + 163
            cse_var_31: T.int32 = cse_var_272 + 162
            cse_var_30: T.int32 = cse_var_272 + 161
            cse_var_29: T.int32 = cse_var_272 + 160
            cse_var_28: T.int32 = cse_var_272 + 135
            cse_var_27: T.int32 = cse_var_272 + 134
            cse_var_26: T.int32 = cse_var_272 + 133
            cse_var_25: T.int32 = cse_var_272 + 132
            cse_var_24: T.int32 = cse_var_272 + 131
            cse_var_23: T.int32 = cse_var_272 + 130
            cse_var_22: T.int32 = cse_var_272 + 129
            cse_var_21: T.int32 = cse_var_272 + 128
            cse_var_20: T.int32 = cse_var_272 + 103
            cse_var_19: T.int32 = cse_var_272 + 102
            cse_var_18: T.int32 = cse_var_272 + 101
            cse_var_17: T.int32 = cse_var_272 + 100
            cse_var_16: T.int32 = cse_var_272 + 1
            cse_var_15: T.int32 = cse_var_271 + 96
            cse_var_14: T.int32 = cse_var_271 + 80
            cse_var_13: T.int32 = cse_var_271 + 64
            cse_var_12: T.int32 = cse_var_271 + 48
            cse_var_11: T.int32 = cse_var_271 + 32
            cse_var_10: T.int32 = cse_var_271 + 240
            cse_var_9: T.int32 = cse_var_271 + 224
            cse_var_8: T.int32 = cse_var_271 + 208
            cse_var_7: T.int32 = cse_var_271 + 192
            cse_var_6: T.int32 = cse_var_271 + 176
            cse_var_5: T.int32 = cse_var_271 + 160
            cse_var_4: T.int32 = cse_var_271 + 16
            cse_var_3: T.int32 = cse_var_271 + 144
            cse_var_2: T.int32 = cse_var_271 + 128
            cse_var_1: T.int32 = cse_var_271 + 112
            A_1 = T.Buffer((1024,), data=A.data)
            B_1 = T.Buffer((1024,), data=B.data)
            out_1[0:16] = out_1[0:16] + T.Broadcast(A_1[cse_var_272], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[32:48] = out_1[32:48] + T.Broadcast(A_1[cse_var_71], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[0:16] = out_1[0:16] + T.Broadcast(A_1[cse_var_16], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[32:48] = out_1[32:48] + T.Broadcast(A_1[cse_var_80], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[0:16] = out_1[0:16] + T.Broadcast(A_1[cse_var_45], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[32:48] = out_1[32:48] + T.Broadcast(A_1[cse_var_81], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[0:16] = out_1[0:16] + T.Broadcast(A_1[cse_var_70], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[32:48] = out_1[32:48] + T.Broadcast(A_1[cse_var_82], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[0:16] = out_1[0:16] + T.Broadcast(A_1[cse_var_103], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[32:48] = out_1[32:48] + T.Broadcast(A_1[cse_var_91], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[0:16] = out_1[0:16] + T.Broadcast(A_1[cse_var_128], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[32:48] = out_1[32:48] + T.Broadcast(A_1[cse_var_92], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[0:16] = out_1[0:16] + T.Broadcast(A_1[cse_var_153], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[32:48] = out_1[32:48] + T.Broadcast(A_1[cse_var_93], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[0:16] = out_1[0:16] + T.Broadcast(A_1[cse_var_184], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[32:48] = out_1[32:48] + T.Broadcast(A_1[cse_var_100], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[16:32] = out_1[16:32] + T.Broadcast(A_1[cse_var_272], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[48:64] = out_1[48:64] + T.Broadcast(A_1[cse_var_71], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[16:32] = out_1[16:32] + T.Broadcast(A_1[cse_var_16], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[48:64] = out_1[48:64] + T.Broadcast(A_1[cse_var_80], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[16:32] = out_1[16:32] + T.Broadcast(A_1[cse_var_45], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[48:64] = out_1[48:64] + T.Broadcast(A_1[cse_var_81], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[16:32] = out_1[16:32] + T.Broadcast(A_1[cse_var_70], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[48:64] = out_1[48:64] + T.Broadcast(A_1[cse_var_82], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[16:32] = out_1[16:32] + T.Broadcast(A_1[cse_var_103], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[48:64] = out_1[48:64] + T.Broadcast(A_1[cse_var_91], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[16:32] = out_1[16:32] + T.Broadcast(A_1[cse_var_128], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[48:64] = out_1[48:64] + T.Broadcast(A_1[cse_var_92], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[16:32] = out_1[16:32] + T.Broadcast(A_1[cse_var_153], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[48:64] = out_1[48:64] + T.Broadcast(A_1[cse_var_93], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[16:32] = out_1[16:32] + T.Broadcast(A_1[cse_var_184], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[48:64] = out_1[48:64] + T.Broadcast(A_1[cse_var_100], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[64:80] = out_1[64:80] + T.Broadcast(A_1[cse_var_162], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[96:112] = out_1[96:112] + T.Broadcast(A_1[cse_var_251], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[64:80] = out_1[64:80] + T.Broadcast(A_1[cse_var_171], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[96:112] = out_1[96:112] + T.Broadcast(A_1[cse_var_260], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[64:80] = out_1[64:80] + T.Broadcast(A_1[cse_var_172], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[96:112] = out_1[96:112] + T.Broadcast(A_1[cse_var_261], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[64:80] = out_1[64:80] + T.Broadcast(A_1[cse_var_173], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[96:112] = out_1[96:112] + T.Broadcast(A_1[cse_var_262], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[64:80] = out_1[64:80] + T.Broadcast(A_1[cse_var_182], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[96:112] = out_1[96:112] + T.Broadcast(A_1[cse_var_17], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[64:80] = out_1[64:80] + T.Broadcast(A_1[cse_var_183], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[96:112] = out_1[96:112] + T.Broadcast(A_1[cse_var_18], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[64:80] = out_1[64:80] + T.Broadcast(A_1[cse_var_185], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[96:112] = out_1[96:112] + T.Broadcast(A_1[cse_var_19], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[64:80] = out_1[64:80] + T.Broadcast(A_1[cse_var_192], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[96:112] = out_1[96:112] + T.Broadcast(A_1[cse_var_20], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[80:96] = out_1[80:96] + T.Broadcast(A_1[cse_var_162], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[112:128] = out_1[112:128] + T.Broadcast(A_1[cse_var_251], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[80:96] = out_1[80:96] + T.Broadcast(A_1[cse_var_171], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[112:128] = out_1[112:128] + T.Broadcast(A_1[cse_var_260], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[80:96] = out_1[80:96] + T.Broadcast(A_1[cse_var_172], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[112:128] = out_1[112:128] + T.Broadcast(A_1[cse_var_261], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[80:96] = out_1[80:96] + T.Broadcast(A_1[cse_var_173], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[112:128] = out_1[112:128] + T.Broadcast(A_1[cse_var_262], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[80:96] = out_1[80:96] + T.Broadcast(A_1[cse_var_182], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[112:128] = out_1[112:128] + T.Broadcast(A_1[cse_var_17], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[80:96] = out_1[80:96] + T.Broadcast(A_1[cse_var_183], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[112:128] = out_1[112:128] + T.Broadcast(A_1[cse_var_18], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[80:96] = out_1[80:96] + T.Broadcast(A_1[cse_var_185], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[112:128] = out_1[112:128] + T.Broadcast(A_1[cse_var_19], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[80:96] = out_1[80:96] + T.Broadcast(A_1[cse_var_192], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[112:128] = out_1[112:128] + T.Broadcast(A_1[cse_var_20], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[128:144] = out_1[128:144] + T.Broadcast(A_1[cse_var_21], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[160:176] = out_1[160:176] + T.Broadcast(A_1[cse_var_29], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[128:144] = out_1[128:144] + T.Broadcast(A_1[cse_var_22], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[160:176] = out_1[160:176] + T.Broadcast(A_1[cse_var_30], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[128:144] = out_1[128:144] + T.Broadcast(A_1[cse_var_23], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[160:176] = out_1[160:176] + T.Broadcast(A_1[cse_var_31], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[128:144] = out_1[128:144] + T.Broadcast(A_1[cse_var_24], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[160:176] = out_1[160:176] + T.Broadcast(A_1[cse_var_32], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[128:144] = out_1[128:144] + T.Broadcast(A_1[cse_var_25], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[160:176] = out_1[160:176] + T.Broadcast(A_1[cse_var_33], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[128:144] = out_1[128:144] + T.Broadcast(A_1[cse_var_26], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[160:176] = out_1[160:176] + T.Broadcast(A_1[cse_var_34], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[128:144] = out_1[128:144] + T.Broadcast(A_1[cse_var_27], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[160:176] = out_1[160:176] + T.Broadcast(A_1[cse_var_35], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[128:144] = out_1[128:144] + T.Broadcast(A_1[cse_var_28], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[160:176] = out_1[160:176] + T.Broadcast(A_1[cse_var_36], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[144:160] = out_1[144:160] + T.Broadcast(A_1[cse_var_21], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[176:192] = out_1[176:192] + T.Broadcast(A_1[cse_var_29], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[144:160] = out_1[144:160] + T.Broadcast(A_1[cse_var_22], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[176:192] = out_1[176:192] + T.Broadcast(A_1[cse_var_30], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[144:160] = out_1[144:160] + T.Broadcast(A_1[cse_var_23], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[176:192] = out_1[176:192] + T.Broadcast(A_1[cse_var_31], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[144:160] = out_1[144:160] + T.Broadcast(A_1[cse_var_24], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[176:192] = out_1[176:192] + T.Broadcast(A_1[cse_var_32], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[144:160] = out_1[144:160] + T.Broadcast(A_1[cse_var_25], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[176:192] = out_1[176:192] + T.Broadcast(A_1[cse_var_33], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[144:160] = out_1[144:160] + T.Broadcast(A_1[cse_var_26], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[176:192] = out_1[176:192] + T.Broadcast(A_1[cse_var_34], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[144:160] = out_1[144:160] + T.Broadcast(A_1[cse_var_27], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[176:192] = out_1[176:192] + T.Broadcast(A_1[cse_var_35], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[144:160] = out_1[144:160] + T.Broadcast(A_1[cse_var_28], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[176:192] = out_1[176:192] + T.Broadcast(A_1[cse_var_36], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[192:208] = out_1[192:208] + T.Broadcast(A_1[cse_var_37], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[224:240] = out_1[224:240] + T.Broadcast(A_1[cse_var_46], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[192:208] = out_1[192:208] + T.Broadcast(A_1[cse_var_38], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[224:240] = out_1[224:240] + T.Broadcast(A_1[cse_var_47], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[192:208] = out_1[192:208] + T.Broadcast(A_1[cse_var_39], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[224:240] = out_1[224:240] + T.Broadcast(A_1[cse_var_48], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[192:208] = out_1[192:208] + T.Broadcast(A_1[cse_var_40], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[224:240] = out_1[224:240] + T.Broadcast(A_1[cse_var_49], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[192:208] = out_1[192:208] + T.Broadcast(A_1[cse_var_41], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[224:240] = out_1[224:240] + T.Broadcast(A_1[cse_var_50], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[192:208] = out_1[192:208] + T.Broadcast(A_1[cse_var_42], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[224:240] = out_1[224:240] + T.Broadcast(A_1[cse_var_51], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[192:208] = out_1[192:208] + T.Broadcast(A_1[cse_var_43], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[224:240] = out_1[224:240] + T.Broadcast(A_1[cse_var_52], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[192:208] = out_1[192:208] + T.Broadcast(A_1[cse_var_44], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[224:240] = out_1[224:240] + T.Broadcast(A_1[cse_var_53], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[208:224] = out_1[208:224] + T.Broadcast(A_1[cse_var_37], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[240:256] = out_1[240:256] + T.Broadcast(A_1[cse_var_46], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[208:224] = out_1[208:224] + T.Broadcast(A_1[cse_var_38], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[240:256] = out_1[240:256] + T.Broadcast(A_1[cse_var_47], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[208:224] = out_1[208:224] + T.Broadcast(A_1[cse_var_39], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[240:256] = out_1[240:256] + T.Broadcast(A_1[cse_var_48], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[208:224] = out_1[208:224] + T.Broadcast(A_1[cse_var_40], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[240:256] = out_1[240:256] + T.Broadcast(A_1[cse_var_49], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[208:224] = out_1[208:224] + T.Broadcast(A_1[cse_var_41], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[240:256] = out_1[240:256] + T.Broadcast(A_1[cse_var_50], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[208:224] = out_1[208:224] + T.Broadcast(A_1[cse_var_42], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[240:256] = out_1[240:256] + T.Broadcast(A_1[cse_var_51], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[208:224] = out_1[208:224] + T.Broadcast(A_1[cse_var_43], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[240:256] = out_1[240:256] + T.Broadcast(A_1[cse_var_52], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[208:224] = out_1[208:224] + T.Broadcast(A_1[cse_var_44], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[240:256] = out_1[240:256] + T.Broadcast(A_1[cse_var_53], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[256:272] = out_1[256:272] + T.Broadcast(A_1[cse_var_54], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[288:304] = out_1[288:304] + T.Broadcast(A_1[cse_var_62], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[256:272] = out_1[256:272] + T.Broadcast(A_1[cse_var_55], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[288:304] = out_1[288:304] + T.Broadcast(A_1[cse_var_63], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[256:272] = out_1[256:272] + T.Broadcast(A_1[cse_var_56], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[288:304] = out_1[288:304] + T.Broadcast(A_1[cse_var_64], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[256:272] = out_1[256:272] + T.Broadcast(A_1[cse_var_57], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[288:304] = out_1[288:304] + T.Broadcast(A_1[cse_var_65], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[256:272] = out_1[256:272] + T.Broadcast(A_1[cse_var_58], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[288:304] = out_1[288:304] + T.Broadcast(A_1[cse_var_66], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[256:272] = out_1[256:272] + T.Broadcast(A_1[cse_var_59], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[288:304] = out_1[288:304] + T.Broadcast(A_1[cse_var_67], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[256:272] = out_1[256:272] + T.Broadcast(A_1[cse_var_60], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[288:304] = out_1[288:304] + T.Broadcast(A_1[cse_var_68], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[256:272] = out_1[256:272] + T.Broadcast(A_1[cse_var_61], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[288:304] = out_1[288:304] + T.Broadcast(A_1[cse_var_69], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[272:288] = out_1[272:288] + T.Broadcast(A_1[cse_var_54], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[304:320] = out_1[304:320] + T.Broadcast(A_1[cse_var_62], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[272:288] = out_1[272:288] + T.Broadcast(A_1[cse_var_55], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[304:320] = out_1[304:320] + T.Broadcast(A_1[cse_var_63], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[272:288] = out_1[272:288] + T.Broadcast(A_1[cse_var_56], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[304:320] = out_1[304:320] + T.Broadcast(A_1[cse_var_64], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[272:288] = out_1[272:288] + T.Broadcast(A_1[cse_var_57], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[304:320] = out_1[304:320] + T.Broadcast(A_1[cse_var_65], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[272:288] = out_1[272:288] + T.Broadcast(A_1[cse_var_58], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[304:320] = out_1[304:320] + T.Broadcast(A_1[cse_var_66], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[272:288] = out_1[272:288] + T.Broadcast(A_1[cse_var_59], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[304:320] = out_1[304:320] + T.Broadcast(A_1[cse_var_67], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[272:288] = out_1[272:288] + T.Broadcast(A_1[cse_var_60], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[304:320] = out_1[304:320] + T.Broadcast(A_1[cse_var_68], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[272:288] = out_1[272:288] + T.Broadcast(A_1[cse_var_61], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[304:320] = out_1[304:320] + T.Broadcast(A_1[cse_var_69], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[320:336] = out_1[320:336] + T.Broadcast(A_1[cse_var_72], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[352:368] = out_1[352:368] + T.Broadcast(A_1[cse_var_83], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[320:336] = out_1[320:336] + T.Broadcast(A_1[cse_var_73], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[352:368] = out_1[352:368] + T.Broadcast(A_1[cse_var_84], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[320:336] = out_1[320:336] + T.Broadcast(A_1[cse_var_74], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[352:368] = out_1[352:368] + T.Broadcast(A_1[cse_var_85], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[320:336] = out_1[320:336] + T.Broadcast(A_1[cse_var_75], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[352:368] = out_1[352:368] + T.Broadcast(A_1[cse_var_86], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[320:336] = out_1[320:336] + T.Broadcast(A_1[cse_var_76], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[352:368] = out_1[352:368] + T.Broadcast(A_1[cse_var_87], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[320:336] = out_1[320:336] + T.Broadcast(A_1[cse_var_77], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[352:368] = out_1[352:368] + T.Broadcast(A_1[cse_var_88], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[320:336] = out_1[320:336] + T.Broadcast(A_1[cse_var_78], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[352:368] = out_1[352:368] + T.Broadcast(A_1[cse_var_89], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[320:336] = out_1[320:336] + T.Broadcast(A_1[cse_var_79], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[352:368] = out_1[352:368] + T.Broadcast(A_1[cse_var_90], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[336:352] = out_1[336:352] + T.Broadcast(A_1[cse_var_72], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[368:384] = out_1[368:384] + T.Broadcast(A_1[cse_var_83], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[336:352] = out_1[336:352] + T.Broadcast(A_1[cse_var_73], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[368:384] = out_1[368:384] + T.Broadcast(A_1[cse_var_84], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[336:352] = out_1[336:352] + T.Broadcast(A_1[cse_var_74], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[368:384] = out_1[368:384] + T.Broadcast(A_1[cse_var_85], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[336:352] = out_1[336:352] + T.Broadcast(A_1[cse_var_75], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[368:384] = out_1[368:384] + T.Broadcast(A_1[cse_var_86], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[336:352] = out_1[336:352] + T.Broadcast(A_1[cse_var_76], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[368:384] = out_1[368:384] + T.Broadcast(A_1[cse_var_87], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[336:352] = out_1[336:352] + T.Broadcast(A_1[cse_var_77], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[368:384] = out_1[368:384] + T.Broadcast(A_1[cse_var_88], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[336:352] = out_1[336:352] + T.Broadcast(A_1[cse_var_78], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[368:384] = out_1[368:384] + T.Broadcast(A_1[cse_var_89], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[336:352] = out_1[336:352] + T.Broadcast(A_1[cse_var_79], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[368:384] = out_1[368:384] + T.Broadcast(A_1[cse_var_90], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[384:400] = out_1[384:400] + T.Broadcast(A_1[cse_var_94], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[416:432] = out_1[416:432] + T.Broadcast(A_1[cse_var_104], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[384:400] = out_1[384:400] + T.Broadcast(A_1[cse_var_95], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[416:432] = out_1[416:432] + T.Broadcast(A_1[cse_var_105], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[384:400] = out_1[384:400] + T.Broadcast(A_1[cse_var_96], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[416:432] = out_1[416:432] + T.Broadcast(A_1[cse_var_106], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[384:400] = out_1[384:400] + T.Broadcast(A_1[cse_var_97], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[416:432] = out_1[416:432] + T.Broadcast(A_1[cse_var_107], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[384:400] = out_1[384:400] + T.Broadcast(A_1[cse_var_98], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[416:432] = out_1[416:432] + T.Broadcast(A_1[cse_var_108], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[384:400] = out_1[384:400] + T.Broadcast(A_1[cse_var_99], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[416:432] = out_1[416:432] + T.Broadcast(A_1[cse_var_109], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[384:400] = out_1[384:400] + T.Broadcast(A_1[cse_var_101], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[416:432] = out_1[416:432] + T.Broadcast(A_1[cse_var_110], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[384:400] = out_1[384:400] + T.Broadcast(A_1[cse_var_102], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[416:432] = out_1[416:432] + T.Broadcast(A_1[cse_var_111], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[400:416] = out_1[400:416] + T.Broadcast(A_1[cse_var_94], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[432:448] = out_1[432:448] + T.Broadcast(A_1[cse_var_104], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[400:416] = out_1[400:416] + T.Broadcast(A_1[cse_var_95], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[432:448] = out_1[432:448] + T.Broadcast(A_1[cse_var_105], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[400:416] = out_1[400:416] + T.Broadcast(A_1[cse_var_96], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[432:448] = out_1[432:448] + T.Broadcast(A_1[cse_var_106], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[400:416] = out_1[400:416] + T.Broadcast(A_1[cse_var_97], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[432:448] = out_1[432:448] + T.Broadcast(A_1[cse_var_107], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[400:416] = out_1[400:416] + T.Broadcast(A_1[cse_var_98], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[432:448] = out_1[432:448] + T.Broadcast(A_1[cse_var_108], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[400:416] = out_1[400:416] + T.Broadcast(A_1[cse_var_99], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[432:448] = out_1[432:448] + T.Broadcast(A_1[cse_var_109], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[400:416] = out_1[400:416] + T.Broadcast(A_1[cse_var_101], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[432:448] = out_1[432:448] + T.Broadcast(A_1[cse_var_110], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[400:416] = out_1[400:416] + T.Broadcast(A_1[cse_var_102], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[432:448] = out_1[432:448] + T.Broadcast(A_1[cse_var_111], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[448:464] = out_1[448:464] + T.Broadcast(A_1[cse_var_112], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[480:496] = out_1[480:496] + T.Broadcast(A_1[cse_var_120], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[448:464] = out_1[448:464] + T.Broadcast(A_1[cse_var_113], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[480:496] = out_1[480:496] + T.Broadcast(A_1[cse_var_121], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[448:464] = out_1[448:464] + T.Broadcast(A_1[cse_var_114], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[480:496] = out_1[480:496] + T.Broadcast(A_1[cse_var_122], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[448:464] = out_1[448:464] + T.Broadcast(A_1[cse_var_115], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[480:496] = out_1[480:496] + T.Broadcast(A_1[cse_var_123], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[448:464] = out_1[448:464] + T.Broadcast(A_1[cse_var_116], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[480:496] = out_1[480:496] + T.Broadcast(A_1[cse_var_124], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[448:464] = out_1[448:464] + T.Broadcast(A_1[cse_var_117], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[480:496] = out_1[480:496] + T.Broadcast(A_1[cse_var_125], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[448:464] = out_1[448:464] + T.Broadcast(A_1[cse_var_118], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[480:496] = out_1[480:496] + T.Broadcast(A_1[cse_var_126], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[448:464] = out_1[448:464] + T.Broadcast(A_1[cse_var_119], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[480:496] = out_1[480:496] + T.Broadcast(A_1[cse_var_127], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[464:480] = out_1[464:480] + T.Broadcast(A_1[cse_var_112], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[496:512] = out_1[496:512] + T.Broadcast(A_1[cse_var_120], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[464:480] = out_1[464:480] + T.Broadcast(A_1[cse_var_113], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[496:512] = out_1[496:512] + T.Broadcast(A_1[cse_var_121], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[464:480] = out_1[464:480] + T.Broadcast(A_1[cse_var_114], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[496:512] = out_1[496:512] + T.Broadcast(A_1[cse_var_122], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[464:480] = out_1[464:480] + T.Broadcast(A_1[cse_var_115], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[496:512] = out_1[496:512] + T.Broadcast(A_1[cse_var_123], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[464:480] = out_1[464:480] + T.Broadcast(A_1[cse_var_116], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[496:512] = out_1[496:512] + T.Broadcast(A_1[cse_var_124], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[464:480] = out_1[464:480] + T.Broadcast(A_1[cse_var_117], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[496:512] = out_1[496:512] + T.Broadcast(A_1[cse_var_125], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[464:480] = out_1[464:480] + T.Broadcast(A_1[cse_var_118], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[496:512] = out_1[496:512] + T.Broadcast(A_1[cse_var_126], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[464:480] = out_1[464:480] + T.Broadcast(A_1[cse_var_119], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[496:512] = out_1[496:512] + T.Broadcast(A_1[cse_var_127], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[512:528] = out_1[512:528] + T.Broadcast(A_1[cse_var_129], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[544:560] = out_1[544:560] + T.Broadcast(A_1[cse_var_137], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[512:528] = out_1[512:528] + T.Broadcast(A_1[cse_var_130], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[544:560] = out_1[544:560] + T.Broadcast(A_1[cse_var_138], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[512:528] = out_1[512:528] + T.Broadcast(A_1[cse_var_131], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[544:560] = out_1[544:560] + T.Broadcast(A_1[cse_var_139], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[512:528] = out_1[512:528] + T.Broadcast(A_1[cse_var_132], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[544:560] = out_1[544:560] + T.Broadcast(A_1[cse_var_140], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[512:528] = out_1[512:528] + T.Broadcast(A_1[cse_var_133], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[544:560] = out_1[544:560] + T.Broadcast(A_1[cse_var_141], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[512:528] = out_1[512:528] + T.Broadcast(A_1[cse_var_134], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[544:560] = out_1[544:560] + T.Broadcast(A_1[cse_var_142], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[512:528] = out_1[512:528] + T.Broadcast(A_1[cse_var_135], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[544:560] = out_1[544:560] + T.Broadcast(A_1[cse_var_143], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[512:528] = out_1[512:528] + T.Broadcast(A_1[cse_var_136], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[544:560] = out_1[544:560] + T.Broadcast(A_1[cse_var_144], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[528:544] = out_1[528:544] + T.Broadcast(A_1[cse_var_129], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[560:576] = out_1[560:576] + T.Broadcast(A_1[cse_var_137], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[528:544] = out_1[528:544] + T.Broadcast(A_1[cse_var_130], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[560:576] = out_1[560:576] + T.Broadcast(A_1[cse_var_138], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[528:544] = out_1[528:544] + T.Broadcast(A_1[cse_var_131], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[560:576] = out_1[560:576] + T.Broadcast(A_1[cse_var_139], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[528:544] = out_1[528:544] + T.Broadcast(A_1[cse_var_132], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[560:576] = out_1[560:576] + T.Broadcast(A_1[cse_var_140], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[528:544] = out_1[528:544] + T.Broadcast(A_1[cse_var_133], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[560:576] = out_1[560:576] + T.Broadcast(A_1[cse_var_141], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[528:544] = out_1[528:544] + T.Broadcast(A_1[cse_var_134], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[560:576] = out_1[560:576] + T.Broadcast(A_1[cse_var_142], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[528:544] = out_1[528:544] + T.Broadcast(A_1[cse_var_135], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[560:576] = out_1[560:576] + T.Broadcast(A_1[cse_var_143], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[528:544] = out_1[528:544] + T.Broadcast(A_1[cse_var_136], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[560:576] = out_1[560:576] + T.Broadcast(A_1[cse_var_144], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[576:592] = out_1[576:592] + T.Broadcast(A_1[cse_var_145], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[608:624] = out_1[608:624] + T.Broadcast(A_1[cse_var_154], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[576:592] = out_1[576:592] + T.Broadcast(A_1[cse_var_146], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[608:624] = out_1[608:624] + T.Broadcast(A_1[cse_var_155], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[576:592] = out_1[576:592] + T.Broadcast(A_1[cse_var_147], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[608:624] = out_1[608:624] + T.Broadcast(A_1[cse_var_156], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[576:592] = out_1[576:592] + T.Broadcast(A_1[cse_var_148], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[608:624] = out_1[608:624] + T.Broadcast(A_1[cse_var_157], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[576:592] = out_1[576:592] + T.Broadcast(A_1[cse_var_149], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[608:624] = out_1[608:624] + T.Broadcast(A_1[cse_var_158], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[576:592] = out_1[576:592] + T.Broadcast(A_1[cse_var_150], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[608:624] = out_1[608:624] + T.Broadcast(A_1[cse_var_159], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[576:592] = out_1[576:592] + T.Broadcast(A_1[cse_var_151], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[608:624] = out_1[608:624] + T.Broadcast(A_1[cse_var_160], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[576:592] = out_1[576:592] + T.Broadcast(A_1[cse_var_152], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[608:624] = out_1[608:624] + T.Broadcast(A_1[cse_var_161], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[592:608] = out_1[592:608] + T.Broadcast(A_1[cse_var_145], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[624:640] = out_1[624:640] + T.Broadcast(A_1[cse_var_154], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[592:608] = out_1[592:608] + T.Broadcast(A_1[cse_var_146], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[624:640] = out_1[624:640] + T.Broadcast(A_1[cse_var_155], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[592:608] = out_1[592:608] + T.Broadcast(A_1[cse_var_147], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[624:640] = out_1[624:640] + T.Broadcast(A_1[cse_var_156], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[592:608] = out_1[592:608] + T.Broadcast(A_1[cse_var_148], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[624:640] = out_1[624:640] + T.Broadcast(A_1[cse_var_157], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[592:608] = out_1[592:608] + T.Broadcast(A_1[cse_var_149], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[624:640] = out_1[624:640] + T.Broadcast(A_1[cse_var_158], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[592:608] = out_1[592:608] + T.Broadcast(A_1[cse_var_150], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[624:640] = out_1[624:640] + T.Broadcast(A_1[cse_var_159], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[592:608] = out_1[592:608] + T.Broadcast(A_1[cse_var_151], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[624:640] = out_1[624:640] + T.Broadcast(A_1[cse_var_160], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[592:608] = out_1[592:608] + T.Broadcast(A_1[cse_var_152], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[624:640] = out_1[624:640] + T.Broadcast(A_1[cse_var_161], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[640:656] = out_1[640:656] + T.Broadcast(A_1[cse_var_163], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[672:688] = out_1[672:688] + T.Broadcast(A_1[cse_var_174], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[640:656] = out_1[640:656] + T.Broadcast(A_1[cse_var_164], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[672:688] = out_1[672:688] + T.Broadcast(A_1[cse_var_175], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[640:656] = out_1[640:656] + T.Broadcast(A_1[cse_var_165], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[672:688] = out_1[672:688] + T.Broadcast(A_1[cse_var_176], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[640:656] = out_1[640:656] + T.Broadcast(A_1[cse_var_166], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[672:688] = out_1[672:688] + T.Broadcast(A_1[cse_var_177], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[640:656] = out_1[640:656] + T.Broadcast(A_1[cse_var_167], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[672:688] = out_1[672:688] + T.Broadcast(A_1[cse_var_178], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[640:656] = out_1[640:656] + T.Broadcast(A_1[cse_var_168], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[672:688] = out_1[672:688] + T.Broadcast(A_1[cse_var_179], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[640:656] = out_1[640:656] + T.Broadcast(A_1[cse_var_169], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[672:688] = out_1[672:688] + T.Broadcast(A_1[cse_var_180], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[640:656] = out_1[640:656] + T.Broadcast(A_1[cse_var_170], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[672:688] = out_1[672:688] + T.Broadcast(A_1[cse_var_181], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[656:672] = out_1[656:672] + T.Broadcast(A_1[cse_var_163], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[688:704] = out_1[688:704] + T.Broadcast(A_1[cse_var_174], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[656:672] = out_1[656:672] + T.Broadcast(A_1[cse_var_164], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[688:704] = out_1[688:704] + T.Broadcast(A_1[cse_var_175], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[656:672] = out_1[656:672] + T.Broadcast(A_1[cse_var_165], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[688:704] = out_1[688:704] + T.Broadcast(A_1[cse_var_176], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[656:672] = out_1[656:672] + T.Broadcast(A_1[cse_var_166], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[688:704] = out_1[688:704] + T.Broadcast(A_1[cse_var_177], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[656:672] = out_1[656:672] + T.Broadcast(A_1[cse_var_167], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[688:704] = out_1[688:704] + T.Broadcast(A_1[cse_var_178], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[656:672] = out_1[656:672] + T.Broadcast(A_1[cse_var_168], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[688:704] = out_1[688:704] + T.Broadcast(A_1[cse_var_179], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[656:672] = out_1[656:672] + T.Broadcast(A_1[cse_var_169], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[688:704] = out_1[688:704] + T.Broadcast(A_1[cse_var_180], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[656:672] = out_1[656:672] + T.Broadcast(A_1[cse_var_170], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[688:704] = out_1[688:704] + T.Broadcast(A_1[cse_var_181], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[704:720] = out_1[704:720] + T.Broadcast(A_1[cse_var_186], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[736:752] = out_1[736:752] + T.Broadcast(A_1[cse_var_195], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[704:720] = out_1[704:720] + T.Broadcast(A_1[cse_var_187], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[736:752] = out_1[736:752] + T.Broadcast(A_1[cse_var_196], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[704:720] = out_1[704:720] + T.Broadcast(A_1[cse_var_188], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[736:752] = out_1[736:752] + T.Broadcast(A_1[cse_var_197], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[704:720] = out_1[704:720] + T.Broadcast(A_1[cse_var_189], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[736:752] = out_1[736:752] + T.Broadcast(A_1[cse_var_198], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[704:720] = out_1[704:720] + T.Broadcast(A_1[cse_var_190], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[736:752] = out_1[736:752] + T.Broadcast(A_1[cse_var_199], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[704:720] = out_1[704:720] + T.Broadcast(A_1[cse_var_191], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[736:752] = out_1[736:752] + T.Broadcast(A_1[cse_var_200], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[704:720] = out_1[704:720] + T.Broadcast(A_1[cse_var_193], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[736:752] = out_1[736:752] + T.Broadcast(A_1[cse_var_201], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[704:720] = out_1[704:720] + T.Broadcast(A_1[cse_var_194], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[736:752] = out_1[736:752] + T.Broadcast(A_1[cse_var_202], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[720:736] = out_1[720:736] + T.Broadcast(A_1[cse_var_186], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[752:768] = out_1[752:768] + T.Broadcast(A_1[cse_var_195], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[720:736] = out_1[720:736] + T.Broadcast(A_1[cse_var_187], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[752:768] = out_1[752:768] + T.Broadcast(A_1[cse_var_196], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[720:736] = out_1[720:736] + T.Broadcast(A_1[cse_var_188], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[752:768] = out_1[752:768] + T.Broadcast(A_1[cse_var_197], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[720:736] = out_1[720:736] + T.Broadcast(A_1[cse_var_189], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[752:768] = out_1[752:768] + T.Broadcast(A_1[cse_var_198], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[720:736] = out_1[720:736] + T.Broadcast(A_1[cse_var_190], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[752:768] = out_1[752:768] + T.Broadcast(A_1[cse_var_199], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[720:736] = out_1[720:736] + T.Broadcast(A_1[cse_var_191], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[752:768] = out_1[752:768] + T.Broadcast(A_1[cse_var_200], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[720:736] = out_1[720:736] + T.Broadcast(A_1[cse_var_193], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[752:768] = out_1[752:768] + T.Broadcast(A_1[cse_var_201], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[720:736] = out_1[720:736] + T.Broadcast(A_1[cse_var_194], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[752:768] = out_1[752:768] + T.Broadcast(A_1[cse_var_202], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[768:784] = out_1[768:784] + T.Broadcast(A_1[cse_var_203], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[800:816] = out_1[800:816] + T.Broadcast(A_1[cse_var_211], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[768:784] = out_1[768:784] + T.Broadcast(A_1[cse_var_204], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[800:816] = out_1[800:816] + T.Broadcast(A_1[cse_var_212], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[768:784] = out_1[768:784] + T.Broadcast(A_1[cse_var_205], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[800:816] = out_1[800:816] + T.Broadcast(A_1[cse_var_213], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[768:784] = out_1[768:784] + T.Broadcast(A_1[cse_var_206], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[800:816] = out_1[800:816] + T.Broadcast(A_1[cse_var_214], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[768:784] = out_1[768:784] + T.Broadcast(A_1[cse_var_207], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[800:816] = out_1[800:816] + T.Broadcast(A_1[cse_var_215], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[768:784] = out_1[768:784] + T.Broadcast(A_1[cse_var_208], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[800:816] = out_1[800:816] + T.Broadcast(A_1[cse_var_216], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[768:784] = out_1[768:784] + T.Broadcast(A_1[cse_var_209], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[800:816] = out_1[800:816] + T.Broadcast(A_1[cse_var_217], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[768:784] = out_1[768:784] + T.Broadcast(A_1[cse_var_210], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[800:816] = out_1[800:816] + T.Broadcast(A_1[cse_var_218], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[784:800] = out_1[784:800] + T.Broadcast(A_1[cse_var_203], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[816:832] = out_1[816:832] + T.Broadcast(A_1[cse_var_211], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[784:800] = out_1[784:800] + T.Broadcast(A_1[cse_var_204], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[816:832] = out_1[816:832] + T.Broadcast(A_1[cse_var_212], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[784:800] = out_1[784:800] + T.Broadcast(A_1[cse_var_205], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[816:832] = out_1[816:832] + T.Broadcast(A_1[cse_var_213], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[784:800] = out_1[784:800] + T.Broadcast(A_1[cse_var_206], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[816:832] = out_1[816:832] + T.Broadcast(A_1[cse_var_214], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[784:800] = out_1[784:800] + T.Broadcast(A_1[cse_var_207], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[816:832] = out_1[816:832] + T.Broadcast(A_1[cse_var_215], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[784:800] = out_1[784:800] + T.Broadcast(A_1[cse_var_208], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[816:832] = out_1[816:832] + T.Broadcast(A_1[cse_var_216], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[784:800] = out_1[784:800] + T.Broadcast(A_1[cse_var_209], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[816:832] = out_1[816:832] + T.Broadcast(A_1[cse_var_217], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[784:800] = out_1[784:800] + T.Broadcast(A_1[cse_var_210], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[816:832] = out_1[816:832] + T.Broadcast(A_1[cse_var_218], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[832:848] = out_1[832:848] + T.Broadcast(A_1[cse_var_219], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[864:880] = out_1[864:880] + T.Broadcast(A_1[cse_var_227], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[832:848] = out_1[832:848] + T.Broadcast(A_1[cse_var_220], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[864:880] = out_1[864:880] + T.Broadcast(A_1[cse_var_228], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[832:848] = out_1[832:848] + T.Broadcast(A_1[cse_var_221], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[864:880] = out_1[864:880] + T.Broadcast(A_1[cse_var_229], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[832:848] = out_1[832:848] + T.Broadcast(A_1[cse_var_222], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[864:880] = out_1[864:880] + T.Broadcast(A_1[cse_var_230], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[832:848] = out_1[832:848] + T.Broadcast(A_1[cse_var_223], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[864:880] = out_1[864:880] + T.Broadcast(A_1[cse_var_231], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[832:848] = out_1[832:848] + T.Broadcast(A_1[cse_var_224], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[864:880] = out_1[864:880] + T.Broadcast(A_1[cse_var_232], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[832:848] = out_1[832:848] + T.Broadcast(A_1[cse_var_225], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[864:880] = out_1[864:880] + T.Broadcast(A_1[cse_var_233], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[832:848] = out_1[832:848] + T.Broadcast(A_1[cse_var_226], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[864:880] = out_1[864:880] + T.Broadcast(A_1[cse_var_234], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[848:864] = out_1[848:864] + T.Broadcast(A_1[cse_var_219], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[880:896] = out_1[880:896] + T.Broadcast(A_1[cse_var_227], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[848:864] = out_1[848:864] + T.Broadcast(A_1[cse_var_220], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[880:896] = out_1[880:896] + T.Broadcast(A_1[cse_var_228], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[848:864] = out_1[848:864] + T.Broadcast(A_1[cse_var_221], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[880:896] = out_1[880:896] + T.Broadcast(A_1[cse_var_229], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[848:864] = out_1[848:864] + T.Broadcast(A_1[cse_var_222], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[880:896] = out_1[880:896] + T.Broadcast(A_1[cse_var_230], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[848:864] = out_1[848:864] + T.Broadcast(A_1[cse_var_223], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[880:896] = out_1[880:896] + T.Broadcast(A_1[cse_var_231], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[848:864] = out_1[848:864] + T.Broadcast(A_1[cse_var_224], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[880:896] = out_1[880:896] + T.Broadcast(A_1[cse_var_232], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[848:864] = out_1[848:864] + T.Broadcast(A_1[cse_var_225], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[880:896] = out_1[880:896] + T.Broadcast(A_1[cse_var_233], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[848:864] = out_1[848:864] + T.Broadcast(A_1[cse_var_226], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[880:896] = out_1[880:896] + T.Broadcast(A_1[cse_var_234], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[896:912] = out_1[896:912] + T.Broadcast(A_1[cse_var_235], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[928:944] = out_1[928:944] + T.Broadcast(A_1[cse_var_243], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[896:912] = out_1[896:912] + T.Broadcast(A_1[cse_var_236], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[928:944] = out_1[928:944] + T.Broadcast(A_1[cse_var_244], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[896:912] = out_1[896:912] + T.Broadcast(A_1[cse_var_237], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[928:944] = out_1[928:944] + T.Broadcast(A_1[cse_var_245], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[896:912] = out_1[896:912] + T.Broadcast(A_1[cse_var_238], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[928:944] = out_1[928:944] + T.Broadcast(A_1[cse_var_246], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[896:912] = out_1[896:912] + T.Broadcast(A_1[cse_var_239], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[928:944] = out_1[928:944] + T.Broadcast(A_1[cse_var_247], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[896:912] = out_1[896:912] + T.Broadcast(A_1[cse_var_240], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[928:944] = out_1[928:944] + T.Broadcast(A_1[cse_var_248], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[896:912] = out_1[896:912] + T.Broadcast(A_1[cse_var_241], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[928:944] = out_1[928:944] + T.Broadcast(A_1[cse_var_249], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[896:912] = out_1[896:912] + T.Broadcast(A_1[cse_var_242], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[928:944] = out_1[928:944] + T.Broadcast(A_1[cse_var_250], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[912:928] = out_1[912:928] + T.Broadcast(A_1[cse_var_235], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[944:960] = out_1[944:960] + T.Broadcast(A_1[cse_var_243], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[912:928] = out_1[912:928] + T.Broadcast(A_1[cse_var_236], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[944:960] = out_1[944:960] + T.Broadcast(A_1[cse_var_244], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[912:928] = out_1[912:928] + T.Broadcast(A_1[cse_var_237], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[944:960] = out_1[944:960] + T.Broadcast(A_1[cse_var_245], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[912:928] = out_1[912:928] + T.Broadcast(A_1[cse_var_238], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[944:960] = out_1[944:960] + T.Broadcast(A_1[cse_var_246], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[912:928] = out_1[912:928] + T.Broadcast(A_1[cse_var_239], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[944:960] = out_1[944:960] + T.Broadcast(A_1[cse_var_247], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[912:928] = out_1[912:928] + T.Broadcast(A_1[cse_var_240], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[944:960] = out_1[944:960] + T.Broadcast(A_1[cse_var_248], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[912:928] = out_1[912:928] + T.Broadcast(A_1[cse_var_241], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[944:960] = out_1[944:960] + T.Broadcast(A_1[cse_var_249], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[912:928] = out_1[912:928] + T.Broadcast(A_1[cse_var_242], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[944:960] = out_1[944:960] + T.Broadcast(A_1[cse_var_250], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[960:976] = out_1[960:976] + T.Broadcast(A_1[cse_var_252], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[992:1008] = out_1[992:1008] + T.Broadcast(A_1[cse_var_263], 16) * B_1[cse_var_271:cse_var_271 + 16]
            out_1[960:976] = out_1[960:976] + T.Broadcast(A_1[cse_var_253], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[992:1008] = out_1[992:1008] + T.Broadcast(A_1[cse_var_264], 16) * B_1[cse_var_11:cse_var_11 + 16]
            out_1[960:976] = out_1[960:976] + T.Broadcast(A_1[cse_var_254], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[992:1008] = out_1[992:1008] + T.Broadcast(A_1[cse_var_265], 16) * B_1[cse_var_13:cse_var_13 + 16]
            out_1[960:976] = out_1[960:976] + T.Broadcast(A_1[cse_var_255], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[992:1008] = out_1[992:1008] + T.Broadcast(A_1[cse_var_266], 16) * B_1[cse_var_15:cse_var_15 + 16]
            out_1[960:976] = out_1[960:976] + T.Broadcast(A_1[cse_var_256], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[992:1008] = out_1[992:1008] + T.Broadcast(A_1[cse_var_267], 16) * B_1[cse_var_2:cse_var_2 + 16]
            out_1[960:976] = out_1[960:976] + T.Broadcast(A_1[cse_var_257], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[992:1008] = out_1[992:1008] + T.Broadcast(A_1[cse_var_268], 16) * B_1[cse_var_5:cse_var_5 + 16]
            out_1[960:976] = out_1[960:976] + T.Broadcast(A_1[cse_var_258], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[992:1008] = out_1[992:1008] + T.Broadcast(A_1[cse_var_269], 16) * B_1[cse_var_7:cse_var_7 + 16]
            out_1[960:976] = out_1[960:976] + T.Broadcast(A_1[cse_var_259], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[992:1008] = out_1[992:1008] + T.Broadcast(A_1[cse_var_270], 16) * B_1[cse_var_9:cse_var_9 + 16]
            out_1[976:992] = out_1[976:992] + T.Broadcast(A_1[cse_var_252], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[1008:1024] = out_1[1008:1024] + T.Broadcast(A_1[cse_var_263], 16) * B_1[cse_var_4:cse_var_4 + 16]
            out_1[976:992] = out_1[976:992] + T.Broadcast(A_1[cse_var_253], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[1008:1024] = out_1[1008:1024] + T.Broadcast(A_1[cse_var_264], 16) * B_1[cse_var_12:cse_var_12 + 16]
            out_1[976:992] = out_1[976:992] + T.Broadcast(A_1[cse_var_254], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[1008:1024] = out_1[1008:1024] + T.Broadcast(A_1[cse_var_265], 16) * B_1[cse_var_14:cse_var_14 + 16]
            out_1[976:992] = out_1[976:992] + T.Broadcast(A_1[cse_var_255], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[1008:1024] = out_1[1008:1024] + T.Broadcast(A_1[cse_var_266], 16) * B_1[cse_var_1:cse_var_1 + 16]
            out_1[976:992] = out_1[976:992] + T.Broadcast(A_1[cse_var_256], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[1008:1024] = out_1[1008:1024] + T.Broadcast(A_1[cse_var_267], 16) * B_1[cse_var_3:cse_var_3 + 16]
            out_1[976:992] = out_1[976:992] + T.Broadcast(A_1[cse_var_257], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[1008:1024] = out_1[1008:1024] + T.Broadcast(A_1[cse_var_268], 16) * B_1[cse_var_6:cse_var_6 + 16]
            out_1[976:992] = out_1[976:992] + T.Broadcast(A_1[cse_var_258], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[1008:1024] = out_1[1008:1024] + T.Broadcast(A_1[cse_var_269], 16) * B_1[cse_var_8:cse_var_8 + 16]
            out_1[976:992] = out_1[976:992] + T.Broadcast(A_1[cse_var_259], 16) * B_1[cse_var_10:cse_var_10 + 16]
            out_1[1008:1024] = out_1[1008:1024] + T.Broadcast(A_1[cse_var_270], 16) * B_1[cse_var_10:cse_var_10 + 16]
Execution time of this operator: max:0.911 us   median:0.905 us   min:0.898 us
Equivalent python schedule:
out_i, out_j, out_k = tuple(out.op.axis) + tuple(out.op.reduce_axis)
out_i_o_i, out_i_i = s[out].split(out_i, factor=2)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=16)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=1)
out_j_o_i, out_j_i = s[out].split(out_j, factor=16)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=2)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=1)
out_k_o, out_k_i = s[out].split(out_k, factor=8)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_k_o, out_i_o_i, out_j_o_i, out_k_i, out_i_i, out_j_i)
out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i)
s[out].parallel(out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused)
s[out].pragma(out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused, "auto_unroll_max_step", 512)
s[out].pragma(out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused, "unroll_explicit", True)
s[out].vectorize(out_j_i)


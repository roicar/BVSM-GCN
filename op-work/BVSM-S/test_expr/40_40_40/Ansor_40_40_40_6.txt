----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 3
Sample Initial Population	#s: 1929	fail_ct: 13	Time elapsed: 1.04
GA Iter: 0	Max score: 1.0000	Min score: 0.9429	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0000	Min score: 0.9861	#Pop: 128	#M+: 1389	#M-: 72
EvolutionarySearch		#s: 128	Time elapsed: 4.99
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
Get 64 programs to measure:
................****************Computational DAG:
A = PLACEHOLDER [40, 40]
B = PLACEHOLDER [40, 40]
out(i, j) += (A[i, k]*B[k, j])


==================================================
No: 1	GFLOPS: 18.27 / 18.27	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.38, Tstamp:1696730299.82)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,20)
  for k.0 (0,2)
    for i_c.2 (0,20)
      for j_c.2 (0,2)
        for k.1 (0,20)
          for i_c.3 (0,2)
            out.local = ...
  for i.2 (0,40)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 2	GFLOPS: 28.25 / 28.25	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.41, Tstamp:1696730300.10)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@ (0,32)
  for j.1 (0,2)
    for k.0 (0,4)
      for i.2 (0,5)
        for k.1 (0,10)
          vectorize j.3 (0,5)
            out = ...

==================================================
No: 3	GFLOPS: 23.52 / 28.25	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.26, Tstamp:1696730300.23)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,20)
  out.local auto_unroll: 16
  for j_c.1 (0,2)
    for k.0 (0,5)
      for i_c.2 (0,5)
        for k.1 (0,8)
          for i_c.3 (0,8)
            out.local = ...
  for i.1 (0,40)
    vectorize j.1 (0,2)
      out = ...

==================================================
No: 4	GFLOPS: 40.76 / 40.76	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.40, Tstamp:1696730300.52)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,10)
  out.local auto_unroll: 16
  for k.0 (0,8)
    for i_c.2 (0,10)
      for j_c.2 (0,4)
        for k.1 (0,5)
          for i_c.3 (0,4)
            out.local = ...
  for i.2 (0,40)
    vectorize j.2 (0,4)
      out = ...

==================================================
No: 5	GFLOPS: 24.35 / 40.76	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.44, Tstamp:1696730300.81)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  for i_c.1 (0,2)
    for j_c.1 (0,4)
      for k.0 (0,40)
        for i_c.2 (0,2)
          for j_c.2 (0,5)
            for i_c.3 (0,5)
              vectorize j_c.3 (0,2)
                out.local = ...
  for i.1 (0,20)
    vectorize j.1 (0,40)
      out = ...

==================================================
No: 6	GFLOPS: 19.91 / 40.76	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.24, Tstamp:1696730300.95)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,10)
  out.local auto_unroll: 16
  for i_c.1 (0,5)
    for j_c.1 (0,4)
      for k.0 (0,8)
        for k.1 (0,5)
          for i_c.3 (0,8)
            out.local = ...
  for i.1 (0,40)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 7	GFLOPS: 9.22 / 40.76	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696730301.20)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,100)
  for k.0 (0,8)
    for j.2 (0,4)
      for k.1 (0,5)
        for i.3 (0,2)
          vectorize j.3 (0,2)
            out = ...

==================================================
No: 8	GFLOPS: 26.87 / 40.76	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.94, Tstamp:1696730301.47)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  out.local auto_unroll: 512
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for k.0 (0,20)
        for i_c.2 (0,4)
          for j_c.2 (0,5)
            for k.1 (0,2)
              for i_c.3 (0,5)
                vectorize j_c.3 (0,2)
                  out.local = ...
  for i.1 (0,40)
    for j.1 (0,20)
      out = ...

==================================================
No: 9	GFLOPS: 9.09 / 40.76	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.24, Tstamp:1696730301.60)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.................****************
1@ (0,80)
  for k.0 (0,4)
    for i.2 (0,2)
      for k.1 (0,10)
        for i.3 (0,10)
          out = ...

==================================================
No: 10	GFLOPS: 31.15 / 40.76	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.42, Tstamp:1696730301.86)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,16)
  for i.1 (0,2)
    for j.1 (0,5)
      for k.0 (0,4)
        for j_c.2 (0,2)
          for k.1 (0,10)
            for i_c.3 (0,5)
              out.local = ...
      for i.2 (0,5)
        vectorize j.2 (0,2)
          out = ...

==================================================
No: 11	GFLOPS: 30.48 / 40.76	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696730302.05)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  for i_c.1 (0,2)
    for k.0 (0,20)
      for i_c.2 (0,5)
        for j_c.2 (0,2)
          for k.1 (0,2)
            vectorize j_c.3 (0,10)
              out.local = ...
  for i.1 (0,10)
    for j.1 (0,20)
      out = ...

==================================================
No: 12	GFLOPS: 7.45 / 40.76	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.22, Tstamp:1696730302.18)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,40)
  for k.0 (0,2)
    for i.2 (0,40)
      for k.1 (0,20)
        out = ...

==================================================
No: 13	GFLOPS: 18.81 / 40.76	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.45, Tstamp:1696730302.48)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,5)
  out.local auto_unroll: 16
  for k.0 (0,2)
    for i_c.2 (0,8)
      for j_c.2 (0,2)
        for k.1 (0,20)
          vectorize j_c.3 (0,20)
            out.local = ...
  for i.2 (0,8)
    for j.2 (0,40)
      out = ...

==================================================
No: 14	GFLOPS: 72.92 / 72.92	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.49, Tstamp:1696730302.82)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,10)
  out.local auto_unroll: 512
  for k.0 (0,20)
    for j_c.2 (0,8)
      for k.1 (0,2)
        for i_c.3 (0,4)
          vectorize j_c.3 (0,5)
            out.local = ...
  for i.2 (0,4)
    for j.2 (0,40)
      out = ...

==================================================
No: 15	GFLOPS: 40.56 / 72.92	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.76, Tstamp:1696730303.16)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  out.local auto_unroll: 512
  for i_c.1 (0,10)
    for j_c.1 (0,2)
      for k.0 (0,8)
        for j_c.2 (0,2)
          for k.1 (0,5)
            for i_c.3 (0,4)
              vectorize j_c.3 (0,5)
                out.local = ...
  for i.1 (0,40)
    for j.1 (0,20)
      out = ...

==================================================
No: 16	GFLOPS: 45.66 / 72.92	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.50, Tstamp:1696730303.50)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,4)
  for k.0 (0,2)
    for i_c.2 (0,20)
      for j_c.2 (0,20)
        for k.1 (0,20)
          out.local = ...
  for i.2 (0,20)
    for j.2 (0,20)
      out = ...

==================================================
No: 17	GFLOPS: 79.68 / 79.68	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696730307.39)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,50)
  for k.0 (0,20)
    for i_c.2 (0,2)
      for j_c.2 (0,8)
        for k.1 (0,2)
          for i_c.3 (0,2)
            out.local = ...
  for i.1 (0,4)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 18	GFLOPS: 127.71 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.41, Tstamp:1696730307.73)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,40)
  for k.0 (0,10)
    for j.2 (0,5)
      for k.1 (0,4)
        vectorize j.3 (0,8)
          out = ...

==================================================
No: 19	GFLOPS: 36.54 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696730307.97)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,80)
  for j.1 (0,2)
    out.local auto_unroll: 16
    for k.0 (0,2)
      for k.1 (0,20)
        for i_c.3 (0,5)
          vectorize j_c.3 (0,2)
            out.local = ...
    for i.2 (0,5)
      vectorize j.2 (0,2)
        out = ...

==================================================
No: 20	GFLOPS: 56.53 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.39, Tstamp:1696730308.23)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,40)
  out.local auto_unroll: 64
  for j_c.1 (0,2)
    for k.0 (0,4)
      for i_c.2 (0,5)
        for j_c.2 (0,4)
          for k.1 (0,10)
            out.local = ...
  for i.1 (0,5)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 21	GFLOPS: 23.76 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696730308.51)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,40)
  out.local auto_unroll: 16
  for i_c.1 (0,4)
    for j_c.1 (0,5)
      for k.0 (0,2)
        for j_c.2 (0,2)
          for k.1 (0,20)
            out.local = ...
  for i.1 (0,4)
    vectorize j.1 (0,10)
      out = ...

==================================================
No: 22	GFLOPS: 24.02 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.26, Tstamp:1696730308.64)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 512
  for k.0 (0,20)
    for i_c.2 (0,20)
      for k.1 (0,2)
        vectorize j_c.3 (0,10)
          out.local = ...
  for i.1 (0,20)
    vectorize j.1 (0,10)
      out = ...

==================================================
No: 23	GFLOPS: 30.53 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696730308.88)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,10)
  for i.2 (0,8)
    for j.2 (0,20)
      for k.1 (0,40)
        out = ...

==================================================
No: 24	GFLOPS: 19.74 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696730309.14)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@ (0,16)
  for j.1 (0,2)
    for k.1 (0,40)
      for i.3 (0,5)
        vectorize j.3 (0,10)
          out = ...

==================================================
No: 25	GFLOPS: 33.30 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.46, Tstamp:1696730309.42)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,20)
  out.local auto_unroll: 512
  for j_c.1 (0,5)
    for k.0 (0,2)
      for j_c.2 (0,2)
        for k.1 (0,20)
          for i_c.3 (0,8)
            out.local = ...
  for i.1 (0,8)
    for j.1 (0,10)
      out = ...

==================================================
No: 26	GFLOPS: 9.59 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.53, Tstamp:1696730309.56)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,20)
  for k.0 (0,40)
    for i.2 (0,4)
      for j.2 (0,2)
        for i.3 (0,10)
          out = ...

==================================================
No: 27	GFLOPS: 42.06 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.49, Tstamp:1696730309.76)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,50)
  for i.1 (0,4)
    out.local auto_unroll: 512
    for k.0 (0,5)
      for j_c.2 (0,4)
        for k.1 (0,8)
          for i_c.3 (0,2)
            o................****************
ut.local = ...
    for i.2 (0,2)
      vectorize j.2 (0,4)
        out = ...

==================================================
No: 28	GFLOPS: 39.27 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.42, Tstamp:1696730310.04)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,10)
  out.local auto_unroll: 512
  for k.0 (0,20)
    for i_c.2 (0,10)
      for k.1 (0,2)
        for i_c.3 (0,4)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.2 (0,40)
    vectorize j.2 (0,4)
      out = ...

==================================================
No: 29	GFLOPS: 7.71 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.87, Tstamp:1696730310.32)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,16)
  for k.0 (0,4)
    for i.2 (0,2)
      for j.2 (0,10)
        for k.1 (0,10)
          for i.3 (0,5)
            out = ...

==================================================
No: 30	GFLOPS: 22.88 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.84, Tstamp:1696730310.47)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,100)
  for k.0 (0,2)
    for i.2 (0,2)
      for j.2 (0,2)
        for k.1 (0,20)
          for i.3 (0,2)
            vectorize j.3 (0,2)
              out = ...

==================================================
No: 31	GFLOPS: 28.06 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.20, Tstamp:1696730310.60)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,200)
  for k.0 (0,10)
    for i.2 (0,2)
      for j.2 (0,2)
        for k.1 (0,4)
          for i.3 (0,2)
            out = ...

==================================================
No: 32	GFLOPS: 51.35 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.42, Tstamp:1696730310.94)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,40)
  for k.0 (0,10)
    for i.2 (0,2)
      for j.2 (0,20)
        for k.1 (0,4)
          out = ...

==================================================
No: 33	GFLOPS: 23.18 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696730313.61)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,100)
  for i.1 (0,4)
    for k.0 (0,10)
      for j.2 (0,4)
        for k.1 (0,4)
          out = ...

==================================================
No: 34	GFLOPS: 19.52 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696730313.86)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,400)
  out.local auto_unroll: 16
  for k.0 (0,8)
    for k.1 (0,5)
      vectorize j_c.3 (0,4)
        out.local = ...
  vectorize j.2 (0,4)
    out = ...

==================================================
No: 35	GFLOPS: 39.28 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.25, Tstamp:1696730314.06)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,80)
  for k.0 (0,20)
    for k.1 (0,2)
      for i.3 (0,2)
        vectorize j.3 (0,10)
          out = ...

==================================================
No: 36	GFLOPS: 49.14 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696730314.34)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,50)
  out.local auto_unroll: 512
  for k.0 (0,40)
    for j_c.2 (0,4)
      for i_c.3 (0,4)
        vectorize j_c.3 (0,2)
          out.local = ...
  for i.2 (0,4)
    vectorize j.2 (0,8)
      out = ...

==================================================
No: 37	GFLOPS: 37.80 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696730314.62)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,40)
  for k.0 (0,5)
    for j.2 (0,20)
      for k.1 (0,8)
        for j.3 (0,2)
          out = ...

==================================================
No: 38	GFLOPS: 29.07 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.59, Tstamp:1696730314.89)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,200)
  out.local auto_unroll: 512
  for k.0 (0,40)
    for i_c.2 (0,4)
      vectorize j_c.3 (0,2)
        out.local = ...
  for i.2 (0,4)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 39	GFLOPS: 37.65 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.57, Tstamp:1696730315.24)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,160)
  out.local auto_unroll: 512
  for k.0 (0,10)
    for i_c.2 (0,2)
      for k.1 (0,4)
        vectorize j_c.3 (0,5)
          out.local = ...
  for i.2 (0,2)
    vectorize j.2 (0,5)
      out = ...

==================================================
No: 40	GFLOPS: 0.79 / 127.71	results: MeasureResult(cost:[0.0002], error_no:0, all_cost:0.37, Tstamp:1696730315.52)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,20)
  for k.0 (0,40)
    for i.2 (0,20)
      for j.2 (0,2)
        for i.3 (0,2)
          out = ...

==================================================
No: 41	GFLOPS: 45.49 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.74, Tstamp:1696730315.71)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,16)
  out.local auto_unroll: 512
  for k.0 (0,4)
    for j_c.2 (0,2)
      for k.1 (0,10)
        for i_c.3 (0,10)
          vectorize j_c.3 (0,5)
            out.local = ...
  for i.2 (0,10)
    vectorize j.2 (0,10)
      out = ...

==================================================
No: 42	GFLOPS: 18.94 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.19, Tstamp:1696730315.84)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,400)
  out.local auto_unroll: 64
  for k.0 (0,40)
    for i_c.2 (0,2)
      for j_c.2 (0,2)
        out.local = ...
  for i.2 (0,2)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 43	GFLOPS: 14.11 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.25, Tstamp:1696730315.98)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,8)
  for k.0 (0,10)
    for i.2 (0,10)
      for k.1 (0,4)
        for j.3 (0,20)
          out = ...

==================================================
No: 44	GFLOPS: 6.52 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696730316.24)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,4)
  for k.0 (0,4)
    for i.2 (0,20)
      for k.1 (0,10)
        for j.3 (0,20)
          out = ...

==================================================
No: 45	GFLOPS: 23.45 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.20, Tstamp:1696730316.37)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@ (0,200)
  for i.1 (0,2)
    for k.0 (0,10)
      for k.1 (0,4)
        for i.3 (0,4)
          out = ...

==================================================
No: 46	GFLOPS: 29.56 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.23, Tstamp:1696730316.51)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,10)
  out.local auto_unroll: 64
  for i_c.1 (0,10)
    for j_c.1 (0,2)
      for k.0 (0,40)
        for i_c.2 (0,4)
          vectorize j_c.3 (0,2)
            out.local = ...
  for i.1 (0,40)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 47	GFLOPS: 73.89 / 127.71	results: MeasureResult(cost:[0.0000], e................****************
rror_no:0, all_cost:0.30, Tstamp:1696730316.71)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,10)
  for i.2 (0,10)
    for k.1 (0,40)
      for i.3 (0,2)
        vectorize j.3 (0,8)
          out = ...

==================================================
No: 48	GFLOPS: 67.35 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.39, Tstamp:1696730316.90)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,10)
  for k.0 (0,8)
    for i.2 (0,2)
      for k.1 (0,5)
        for i.3 (0,10)
          vectorize j.3 (0,8)
            out = ...

==================================================
No: 49	GFLOPS: 22.19 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.40, Tstamp:1696730319.46)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,80)
  out.local auto_unroll: 64
  for k.0 (0,4)
    for i_c.2 (0,10)
      for j_c.2 (0,2)
        for k.1 (0,10)
          out.local = ...
  for i.2 (0,10)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 50	GFLOPS: 19.77 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.28, Tstamp:1696730319.59)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  out.local auto_unroll: 64
  for j_c.1 (0,10)
    for k.0 (0,5)
      for i_c.2 (0,2)
        for k.1 (0,8)
          for i_c.3 (0,20)
            out.local = ...
  for i.1 (0,40)
    vectorize j.1 (0,10)
      out = ...

==================================================
No: 51	GFLOPS: 75.08 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.30, Tstamp:1696730319.79)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,50)
  for k.0 (0,10)
    for i.2 (0,4)
      for j.2 (0,8)
        for k.1 (0,4)
          out = ...

==================================================
No: 52	GFLOPS: 70.35 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.70, Tstamp:1696730320.06)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  for i_c.1 (0,2)
    for j_c.1 (0,5)
      for k.0 (0,5)
        for i_c.2 (0,10)
          for k.1 (0,8)
            vectorize j_c.3 (0,8)
              out.local = ...
  for i.1 (0,20)
    for j.1 (0,40)
      out = ...

==================================================
No: 53	GFLOPS: 27.53 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.46, Tstamp:1696730320.35)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,40)
  for k.0 (0,8)
    for j.2 (0,2)
      for k.1 (0,5)
        for i.3 (0,10)
          vectorize j.3 (0,2)
            out = ...

==================================================
No: 54	GFLOPS: 28.78 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.42, Tstamp:1696730320.70)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,200)
  for k.0 (0,20)
    for i.2 (0,2)
      for j.2 (0,2)
        for k.1 (0,2)
          for i.3 (0,2)
            out = ...

==================================================
No: 55	GFLOPS: 0.98 / 127.71	results: MeasureResult(cost:[0.0001], error_no:0, all_cost:0.34, Tstamp:1696730320.84)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,4)
  for k.0 (0,5)
    for j.2 (0,5)
      for k.1 (0,8)
        for i.3 (0,40)
          vectorize j.3 (0,2)
            out = ...

==================================================
No: 56	GFLOPS: 36.28 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.25, Tstamp:1696730320.98)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,10)
  out.local auto_unroll: 64
  for j_c.1 (0,2)
    for k.0 (0,10)
      for i_c.2 (0,20)
        for j_c.2 (0,2)
          for k.1 (0,4)
            vectorize j_c.3 (0,2)
              out.local = ...
  for i.1 (0,20)
    for j.1 (0,8)
      out = ...

==================================================
No: 57	GFLOPS: 45.33 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.45, Tstamp:1696730321.17)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 512
  for i_c.1 (0,2)
    for k.0 (0,8)
      for i_c.2 (0,4)
        for k.1 (0,5)
          for i_c.3 (0,5)
            vectorize j_c.3 (0,5)
              out.local = ...
  for i.1 (0,40)
    vectorize j.1 (0,5)
      out = ...

==================================================
No: 58	GFLOPS: 17.88 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.35, Tstamp:1696730321.46)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,20)
  out.local auto_unroll: 64
  for k.0 (0,40)
    for i_c.3 (0,2)
      vectorize j_c.3 (0,40)
        out.local = ...
  for i.2 (0,2)
    vectorize j.2 (0,40)
      out = ...

==================================================
No: 59	GFLOPS: 51.72 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696730321.72)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,40)
  for k.0 (0,10)
    for j_c.2 (0,20)
      for k.1 (0,4)
        vectorize j_c.3 (0,2)
          out.local = ...
  for j.2 (0,40)
    out = ...

==================================================
No: 60	GFLOPS: 22.45 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.49, Tstamp:1696730322.03)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,20)
  out.local auto_unroll: 16
  for j_c.1 (0,4)
    for i_c.2 (0,2)
      for j_c.2 (0,5)
        for k.1 (0,40)
          for i_c.3 (0,2)
            out.local = ...
  for i.1 (0,4)
    for j.1 (0,20)
      out = ...

==================================================
No: 61	GFLOPS: 19.96 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.48, Tstamp:1696730322.32)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,10)
  out.local auto_unroll: 64
  for k.0 (0,4)
    for j_c.2 (0,4)
      for k.1 (0,10)
        for i_c.3 (0,40)
          out.local = ...
  for i.1 (0,40)
    vectorize j.1 (0,4)
      out = ...

==================================================
No: 62	GFLOPS: 10.18 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.37, Tstamp:1696730322.61)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  for j_c.1 (0,20)
    for k.1 (0,40)
      for i_c.3 (0,40)
        out.local = ...
  for i.1 (0,40)
    for j.1 (0,20)
      out = ...

==================================================
No: 63	GFLOPS: 122.12 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.46, Tstamp:1696730322.96)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,4)
  for k.0 (0,2)
    for i.2 (0,5)
      for k.1 (0,20)
        for i.3 (0,2)
          for j.3 (0,40)
            out = ...

==================================================
No: 64	GFLOPS: 6.05 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.23, Tstamp:1696730323.10)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,4)
  for k.0 (0,40)
    for i.2 (0,20)
      for j.2 (0,20)
        out = ...

Time elapsed for measurement: 26.94 s
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.13 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 1932	fail_ct: 22	Time elapsed: 1.18
GA Iter: 0	Max score: 0.9997	Min score: 0.9359	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9999	Min score: 0.9882	#Pop: 128	#M+: 1386	#M-: 72
EvolutionarySearch		#s: 128	Time elapsed: 5.08
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
Get 36 programs to measure:
................****************
==================================================
No: 65	GFLOPS: 19.16 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.43, Tstamp:1696730334.05)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,800)
  for k.0 (0,2)
    for k.1 (0,20)
      for i.3 (0,2)
        out = ...

==================================================
No: 66	GFLOPS: 63.40 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.39, Tstamp:1696730334.26)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,10)
  for k.0 (0,2)
    for i_c.2 (0,4)
      for j_c.2 (0,5)
        for k.1 (0,20)
          vectorize j_c.3 (0,8)
            out.local = ...
  for i.2 (0,4)
    for j.2 (0,40)
      out = ...

==================================================
No: 67	GFLOPS: 26.90 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.38, Tstamp:1696730334.53)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,5)
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for k.0 (0,8)
        for j_c.2 (0,2)
          for k.1 (0,5)
            for i_c.3 (0,20)
              vectorize j_c.3 (0,2)
                out.local = ...
  for i.1 (0,40)
    vectorize j.1 (0,8)
      out = ...

==================================================
No: 68	GFLOPS: 53.78 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.41, Tstamp:1696730334.80)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,40)
  out.local auto_unroll: 16
  for j_c.1 (0,2)
    for k.0 (0,8)
      for j_c.2 (0,5)
        for k.1 (0,5)
          for i_c.3 (0,2)
            vectorize j_c.3 (0,2)
              out.local = ...
  for i.1 (0,2)
    for j.1 (0,20)
      out = ...

==================================================
No: 69	GFLOPS: 47.50 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.14, Tstamp:1696730335.14)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,4)
  for k.0 (0,5)
    for i.2 (0,5)
      for j.2 (0,4)
        for k.1 (0,8)
          for i.3 (0,2)
            vectorize j.3 (0,10)
              out = ...

==================================================
No: 70	GFLOPS: 9.80 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.33, Tstamp:1696730335.28)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,2)
  for k.0 (0,8)
    for i.2 (0,10)
      for j.2 (0,20)
        for k.1 (0,5)
          for i.3 (0,4)
            out = ...

==================================================
No: 71	GFLOPS: 32.15 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696730335.47)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,8)
  out.local auto_unroll: 64
  for k.0 (0,10)
    for i_c.2 (0,10)
      for j_c.2 (0,2)
        for k.1 (0,4)
          vectorize j_c.3 (0,10)
            out.local = ...
  for i.2 (0,10)
    for j.2 (0,20)
      out = ...

==================================================
No: 72	GFLOPS: 22.43 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696730335.76)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@ (0,320)
  for k.0 (0,20)
    for j.2 (0,5)
      for k.1 (0,2)
        out = ...

==================================================
No: 73	GFLOPS: 42.41 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.38, Tstamp:1696730336.01)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,100)
  out.local auto_unroll: 64
  for j_c.1 (0,2)
    for k.0 (0,4)
      for i_c.2 (0,2)
        for j_c.2 (0,2)
          for k.1 (0,10)
            vectorize j_c.3 (0,2)
              out.local = ...
  for i.1 (0,2)
    vectorize j.1 (0,8)
      out = ...

................****************
==================================================
No: 74	GFLOPS: 59.96 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.45, Tstamp:1696730336.35)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,20)
  out.local auto_unroll: 64
  for k.0 (0,4)
    for i_c.2 (0,4)
      for j_c.2 (0,4)
        for k.1 (0,10)
          vectorize j_c.3 (0,5)
            out.local = ...
  for i.2 (0,4)
    vectorize j.2 (0,20)
      out = ...

==================================================
No: 75	GFLOPS: 24.80 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.21, Tstamp:1696730336.48)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,20)
  for k.0 (0,2)
    for i_c.2 (0,40)
      for k.1 (0,20)
        vectorize j_c.3 (0,2)
          out.local = ...
  for i.2 (0,40)
    vectorize j.2 (0,2)
      out = ...

==================================================
No: 76	GFLOPS: 24.33 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:2.37, Tstamp:1696730336.61)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,80)
  for j.2 (0,5)
    for k.1 (0,40)
      for i.3 (0,2)
        vectorize j.3 (0,2)
          out = ...

==================================================
No: 77	GFLOPS: 78.29 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.43, Tstamp:1696730336.95)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,160)
  for k.1 (0,40)
    vectorize j.3 (0,10)
      out = ...

==================================================
No: 78	GFLOPS: 11.03 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.24, Tstamp:1696730337.07)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,20)
  for j.1 (0,20)
    out.local auto_unroll: 64
    for i_c.2 (0,2)
      for j_c.2 (0,2)
        for k.1 (0,40)
          out.local = ...
    for i.2 (0,2)
      vectorize j.2 (0,2)
        out = ...

==================================================
No: 79	GFLOPS: 43.88 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.18, Tstamp:1696730337.33)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,2)
  out.local auto_unroll: 512
  for i_c.1 (0,20)
    for j_c.1 (0,5)
      for k.0 (0,40)
        for j_c.2 (0,8)
          out.local = ...
  for i.1 (0,20)
    for j.1 (0,40)
      out = ...

==================================================
No: 80	GFLOPS: 22.20 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.33, Tstamp:1696730337.46)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,200)
  out.local auto_unroll: 512
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for k.0 (0,8)
        for k.1 (0,5)
          for i_c.3 (0,2)
            out.local = ...
  for i.1 (0,4)
    for j.1 (0,2)
      out = ...

==================================================
No: 81	GFLOPS: 83.24 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.31, Tstamp:1696730340.91)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,16)
  for k.0 (0,10)
    for k.1 (0,4)
      for i.3 (0,10)
        vectorize j.3 (0,10)
          out = ...

==================================================
No: 82	GFLOPS: 64.71 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.36, Tstamp:1696730341.19)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,64)
  out.local auto_unroll: 64
  for k.0 (0,8)
    for k.1 (0,5)
      for i_c.3 (0,5)
        vectorize j_c.3 (0,5)
          out.local = ...
  for i.1 (0,5)
    vectorize j.1 (0,5)
      out = ...

==================================================
No: 83	GFLOPS: 14.23 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.20, Tstamp:1696730341.33)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,200)
  for i.2 (0,2)
    for k.1 (0,40)
      for i.3 (0,2)
        vectorize j.3 (0,2)
          out = ...

==================================================
No: 84	GFLOPS: 32.36 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.30, Tstamp:1696730341.54)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@ (0,160)
  out.local auto_unroll: 64
  for k.0 (0,8)
    for j_c.2 (0,5)
      for k.1 (0,5)
        vectorize j_c.3 (0,2)
          out.local = ...
  vectorize j.2 (0,10)
    out = ...

==================================================
No: 85	GFLOPS: 38.03 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.47, Tstamp:1696730341.81)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,10)
  out.local auto_unroll: 64
  for i_c.1 (0,2)
    for j_c.1 (0,2)
      for i_c.2 (0,2)
        for j_c.2 (0,5)
          for k.1 (0,40)
            vectorize j_c.3 (0,4)
              out.local = ...
  for i.1 (0,4)
    for j.1 (0,40)
      out = ...

==================================================
No: 86	GFLOPS: 52.65 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.29, Tstamp:1696730342.00)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 64
  for i_c.2 (0,4)
    for k.1 (0,40)
      for i_c.3 (0,10)
        vectorize j_c.3 (0,5)
          out.local = ...
  for i.1 (0,40)
    vectorize j.1 (0,5)
      out = ...

==================================================
No: 87	GFLOPS: 100.46 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.57, Tstamp:1696730342.22)
==================================================
Placeholder: A, B
out.local auto_unroll: 512
for k.0 (0,10)
  for i_c.2 (0,20)
    for j_c.2 (0,40)
      for k.1 (0,4)
        for i_c.3 (0,2)
          out.local = ...
for i.2 (0,40)
  vectorize j.2 (0,40)
    out = ...

==================================================
No: 88	GFLOPS: 32.01 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.42, Tstamp:1696730342.51)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  for i_c.1 (0,20)
    for j_c.1 (0,2)
      for k.0 (0,8)
        for j_c.2 (0,10)
          for k.1 (0,5)
            out.local = ...
  for i.1 (0,20)
    for j.1 (0,20)
      out = ...

==================================================
No: 89	GFLOPS: 56.11 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696730342.79)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,200)
  for k.0 (0,40)
    for i.2 (0,2)
      for j.2 (0,2)
        vectorize j.3 (0,2)
          out = ...

==================================================
No: 90	GFLOPS: 72.09 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.31, Tstamp:1696730343.01)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,8)
  out.local auto_unroll: 16
  for k.0 (0,20)
    for j_c.2 (0,10)
      for k.1 (0,2)
        for i_c.3 (0,5)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.1 (0,5)
    vectorize j.1 (0,40)
      out = ...

==================================================
No: 91	GFLOPS: 5.33 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:1.26, Tstamp:1696730343.14)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@j.1@ (0,2)
  for k.0 (0,10)
    for i.2 (0,10)
      for k.1 (0,4)
        for i.3 (0,4)
          for j.3 (0,20)
            out = ...

==================================================
No: 92	GFLOPS: 57.45 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.51, Tstamp:1696730343.41)
==================================================
Placeholder: A, B
parallel i.0@j.0@ (0,4)
  for i_....****
c.1 (0,5)
    for j_c.1 (0,2)
      for k.0 (0,2)
        for j_c.2 (0,5)
          for k.1 (0,20)
            for i_c.3 (0,2)
              vectorize j_c.3 (0,4)
                out.local = ...
  for i.1 (0,10)
    for j.1 (0,40)
      out = ...

==================================================
No: 93	GFLOPS: 6.44 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696730343.58)
==================================================
Placeholder: A, B
out auto_unroll: 16
parallel i.0@j.0@i.1@j.1@ (0,10)
  for i.2 (0,10)
    for j.2 (0,4)
      for k.1 (0,40)
        for i.3 (0,4)
          out = ...

==================================================
No: 94	GFLOPS: 66.51 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.34, Tstamp:1696730343.80)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,20)
  for k.0 (0,8)
    for i_c.2 (0,4)
      for j_c.2 (0,5)
        for k.1 (0,5)
          vectorize j_c.3 (0,4)
            out.local = ...
  for i.2 (0,4)
    for j.2 (0,20)
      out = ...

==================================================
No: 95	GFLOPS: 59.06 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.49, Tstamp:1696730344.08)
==================================================
Placeholder: A, B
out auto_unroll: 512
parallel i.0@j.0@i.1@ (0,200)
  for k.0 (0,2)
    for i.2 (0,2)
      for k.1 (0,20)
        vectorize j.3 (0,4)
          out = ...

==================================================
No: 96	GFLOPS: 18.52 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.22, Tstamp:1696730344.21)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,10)
  for k.0 (0,10)
    for i.2 (0,2)
      for j.2 (0,5)
        for k.1 (0,4)
          for i.3 (0,4)
            vectorize j.3 (0,4)
              out = ...

==================================================
No: 97	GFLOPS: 72.38 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.29, Tstamp:1696730346.40)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,20)
  out.local auto_unroll: 64
  for k.0 (0,40)
    for i_c.2 (0,4)
      for j_c.2 (0,4)
        vectorize j_c.3 (0,5)
          out.local = ...
  for i.2 (0,4)
    vectorize j.2 (0,20)
      out = ...

==================================================
No: 98	GFLOPS: 0.64 / 127.71	results: MeasureResult(cost:[0.0002], error_no:0, all_cost:0.24, Tstamp:1696730346.53)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,5)
  for k.0 (0,8)
    for j.2 (0,8)
      for k.1 (0,5)
        for i.3 (0,40)
          out = ...

==================================================
No: 99	GFLOPS: 87.00 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.32, Tstamp:1696730346.80)
==================================================
Placeholder: A, B
out auto_unroll: 64
parallel i.0@j.0@i.1@j.1@ (0,40)
  for k.0 (0,40)
    for j.2 (0,2)
      for i.3 (0,5)
        vectorize j.3 (0,4)
          out = ...

==================================================
No: 100	GFLOPS: 34.67 / 127.71	results: MeasureResult(cost:[0.0000], error_no:0, all_cost:0.75, Tstamp:1696730347.09)
==================================================
Placeholder: A, B
parallel i.0@j.0@i.1@j.1@ (0,10)
  out.local auto_unroll: 512
  for i_c.2 (0,8)
    for j_c.2 (0,5)
      for k.1 (0,40)
        vectorize j_c.3 (0,4)
          out.local = ...
  for i.2 (0,8)
    for j.2 (0,20)
      out = ...

Time elapsed for measurement: 17.57 s
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((40, 40), "float32"), B: T.Buffer((40, 40), "float32"), out: T.Buffer((40, 40), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        for i_outer_outer_outer_j_outer_outer_outer_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused in T.parallel(40):
            cse_var_1: T.int32 = i_outer_outer_outer_j_outer_outer_outer_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 40
            out_1 = T.Buffer((1600,), data=out.data)
            out_1[cse_var_1:cse_var_1 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 8:cse_var_1 + 8 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 16:cse_var_1 + 16 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 24:cse_var_1 + 24 + 8] = T.Broadcast(T.float32(0), 8)
            out_1[cse_var_1 + 32:cse_var_1 + 32 + 8] = T.Broadcast(T.float32(0), 8)
            for k_outer in range(10):
                cse_var_10: T.int32 = k_outer * 160
                cse_var_9: T.int32 = cse_var_1 + 8
                cse_var_8: T.int32 = cse_var_1 + 32
                cse_var_7: T.int32 = cse_var_1 + 24
                cse_var_6: T.int32 = cse_var_1 + 16
                cse_var_5: T.int32 = cse_var_1 + k_outer * 4
                cse_var_4: T.int32 = cse_var_5 + 3
                cse_var_3: T.int32 = cse_var_5 + 2
                cse_var_2: T.int32 = cse_var_5 + 1
                A_1 = T.Buffer((1600,), data=A.data)
                B_1 = T.Buffer((1600,), data=B.data)
                out_1[cse_var_1:cse_var_1 + 8] = out_1[cse_var_1:cse_var_1 + 8] + T.Broadcast(A_1[cse_var_5], 8) * B_1[cse_var_10:cse_var_10 + 8]
                out_1[cse_var_1:cse_var_1 + 8] = out_1[cse_var_1:cse_var_1 + 8] + T.Broadcast(A_1[cse_var_2], 8) * B_1[cse_var_10 + 40:cse_var_10 + 40 + 8]
                out_1[cse_var_1:cse_var_1 + 8] = out_1[cse_var_1:cse_var_1 + 8] + T.Broadcast(A_1[cse_var_3], 8) * B_1[cse_var_10 + 80:cse_var_10 + 80 + 8]
                out_1[cse_var_1:cse_var_1 + 8] = out_1[cse_var_1:cse_var_1 + 8] + T.Broadcast(A_1[cse_var_4], 8) * B_1[cse_var_10 + 120:cse_var_10 + 120 + 8]
                out_1[cse_var_9:cse_var_9 + 8] = out_1[cse_var_9:cse_var_9 + 8] + T.Broadcast(A_1[cse_var_5], 8) * B_1[cse_var_10 + 8:cse_var_10 + 8 + 8]
                out_1[cse_var_9:cse_var_9 + 8] = out_1[cse_var_9:cse_var_9 + 8] + T.Broadcast(A_1[cse_var_2], 8) * B_1[cse_var_10 + 48:cse_var_10 + 48 + 8]
                out_1[cse_var_9:cse_var_9 + 8] = out_1[cse_var_9:cse_var_9 + 8] + T.Broadcast(A_1[cse_var_3], 8) * B_1[cse_var_10 + 88:cse_var_10 + 88 + 8]
                out_1[cse_var_9:cse_var_9 + 8] = out_1[cse_var_9:cse_var_9 + 8] + T.Broadcast(A_1[cse_var_4], 8) * B_1[cse_var_10 + 128:cse_var_10 + 128 + 8]
                out_1[cse_var_6:cse_var_6 + 8] = out_1[cse_var_6:cse_var_6 + 8] + T.Broadcast(A_1[cse_var_5], 8) * B_1[cse_var_10 + 16:cse_var_10 + 16 + 8]
                out_1[cse_var_6:cse_var_6 + 8] = out_1[cse_var_6:cse_var_6 + 8] + T.Broadcast(A_1[cse_var_2], 8) * B_1[cse_var_10 + 56:cse_var_10 + 56 + 8]
                out_1[cse_var_6:cse_var_6 + 8] = out_1[cse_var_6:cse_var_6 + 8] + T.Broadcast(A_1[cse_var_3], 8) * B_1[cse_var_10 + 96:cse_var_10 + 96 + 8]
                out_1[cse_var_6:cse_var_6 + 8] = out_1[cse_var_6:cse_var_6 + 8] + T.Broadcast(A_1[cse_var_4], 8) * B_1[cse_var_10 + 136:cse_var_10 + 136 + 8]
                out_1[cse_var_7:cse_var_7 + 8] = out_1[cse_var_7:cse_var_7 + 8] + T.Broadcast(A_1[cse_var_5], 8) * B_1[cse_var_10 + 24:cse_var_10 + 24 + 8]
                out_1[cse_var_7:cse_var_7 + 8] = out_1[cse_var_7:cse_var_7 + 8] + T.Broadcast(A_1[cse_var_2], 8) * B_1[cse_var_10 + 64:cse_var_10 + 64 + 8]
                out_1[cse_var_7:cse_var_7 + 8] = out_1[cse_var_7:cse_var_7 + 8] + T.Broadcast(A_1[cse_var_3], 8) * B_1[cse_var_10 + 104:cse_var_10 + 104 + 8]
                out_1[cse_var_7:cse_var_7 + 8] = out_1[cse_var_7:cse_var_7 + 8] + T.Broadcast(A_1[cse_var_4], 8) * B_1[cse_var_10 + 144:cse_var_10 + 144 + 8]
                out_1[cse_var_8:cse_var_8 + 8] = out_1[cse_var_8:cse_var_8 + 8] + T.Broadcast(A_1[cse_var_5], 8) * B_1[cse_var_10 + 32:cse_var_10 + 32 + 8]
                out_1[cse_var_8:cse_var_8 + 8] = out_1[cse_var_8:cse_var_8 + 8] + T.Broadcast(A_1[cse_var_2], 8) * B_1[cse_var_10 + 72:cse_var_10 + 72 + 8]
                out_1[cse_var_8:cse_var_8 + 8] = out_1[cse_var_8:cse_var_8 + 8] + T.Broadcast(A_1[cse_var_3], 8) * B_1[cse_var_10 + 112:cse_var_10 + 112 + 8]
                out_1[cse_var_8:cse_var_8 + 8] = out_1[cse_var_8:cse_var_8 + 8] + T.Broadcast(A_1[cse_var_4], 8) * B_1[cse_var_10 + 152:cse_var_10 + 152 + 8]
Execution time of this operator: max:1.064 us   median:1.050 us   min:1.029 us
Equivalent python schedule:
out_i, out_j, out_k = tuple(out.op.axis) + tuple(out.op.reduce_axis)
out_i_o_i, out_i_i = s[out].split(out_i, factor=1)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=1)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=8)
out_j_o_i, out_j_i = s[out].split(out_j, factor=8)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=5)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=1)
out_k_o, out_k_i = s[out].split(out_k, factor=4)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_k_o, out_i_o_i, out_j_o_i, out_k_i, out_i_i, out_j_i)
out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i)
s[out].parallel(out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused)
s[out].pragma(out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused, "auto_unroll_max_step", 64)
s[out].pragma(out_i_o_o_o_j_o_o_o_fused_i_o_o_i_fused_j_o_o_i_fused, "unroll_explicit", True)
s[out].vectorize(out_j_i)

